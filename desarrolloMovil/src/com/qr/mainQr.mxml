<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:components="spark.components.*"
		xmlns:custom="com.qr.*"
		>
	
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script><![CDATA[
		import com.google.zxing.BarcodeFormat;
		import com.google.zxing.BinaryBitmap;
		import com.google.zxing.BufferedImageLuminanceSource;
		import com.google.zxing.DecodeHintType;
		import com.google.zxing.Result;
		import com.google.zxing.client.result.ParsedResult;
		import com.google.zxing.client.result.ResultParser;
		import com.google.zxing.common.BitMatrix;
		import com.google.zxing.common.ByteMatrix;
		import com.google.zxing.common.GlobalHistogramBinarizer;
		import com.google.zxing.common.flexdatatypes.HashTable;
		import com.google.zxing.qrcode.QRCodeReader;
		import com.google.zxing.qrcode.detector.Detector;
		
		import spark.events.ViewNavigatorEvent;
		
		import tv.digitalretro.components.MessageBox;
		
		
		protected var camera:Camera;
		private var videoDisplay:Video;
		private var qrReader:QRCodeReader;
		private var bmd:BitmapData;
		private var cameraStarted:Boolean = false;
		
		private const VIDEO_SIZE:Number = 300;
		
		public function button1_clickHandler(event:MouseEvent):void
		{
			tv.digitalretro.components.MessageBox.show(this,"recibido");
			if (!cameraStarted) {
				if (Camera.isSupported)
				{
					camera = getBackCamera();
					camera.setMode(VIDEO_SIZE, VIDEO_SIZE, 24);
					
					videoDisplay = new Video(VIDEO_SIZE, VIDEO_SIZE);
					videoDisplay.rotation = 90; // Set rotation if app is portrait mode, otherwise no rotation needed for landscape
					videoDisplay.x = VIDEO_SIZE; // used to align in portrait mode
					
					sv.addChild(videoDisplay);
					
					videoDisplay.attachCamera(camera);
					qrReader=new QRCodeReader;
					btn.label = "Scan Now";
					lbl.text = "";
					cameraStarted = true;
				}
				else {
					lbl.text = "no camera found";
				}
			}
			else {
				lbl.text = "";
				decodeSnapshot();
			}
		}
		
		private function getBackCamera():Camera
		{
			var camera:Camera;
			var cameraCount:uint = Camera.names.length;
			for ( var i:uint = 0; i < cameraCount; ++i )
			{
				camera = Camera.getCamera( String(i) );
				if ( camera.position == "back" ) 
					return camera;
			}
			return Camera.getCamera();
		}
		
		public function decodeSnapshot():void
		{
			lbl.text="checking...";
			bmd=new BitmapData(VIDEO_SIZE, VIDEO_SIZE);
			bmd.draw(videoDisplay, null, null, null, null, true);
			videoDisplay.cacheAsBitmap=true;
			videoDisplay.cacheAsBitmapMatrix=new Matrix;
			decodeBitmapData(bmd, VIDEO_SIZE, VIDEO_SIZE);
			bmd.dispose();
			bmd=null;
			System.gc();
		}
		
		public function decodeBitmapData(bmpd:BitmapData, width:int, height:int):void
		{
			var lsource:BufferedImageLuminanceSource=new BufferedImageLuminanceSource(bmpd);
			var bitmap:BinaryBitmap=new BinaryBitmap(new GlobalHistogramBinarizer(lsource));
			
			var ht:HashTable=null;
			ht=this.getAllHints();
			
			var res:Result=null;
			try {
				res=qrReader.decode(bitmap, ht);
			}
			catch (event:Error) {
			}
			
			if (res == null) {
				videoDisplay.clear();
				lbl.text="nothing decoded";
			}
			else {
				var parsedResult:ParsedResult=ResultParser.parseResult(res);
				lbl.text=parsedResult.getDisplayResult();
				
				btn.label = "Scan Now";
			}
		}
		
		public function getAllHints():HashTable
		{
			var ht:HashTable=new HashTable;
			ht.Add(DecodeHintType.POSSIBLE_FORMATS, BarcodeFormat.QR_CODE);
			return ht;
		}
		
	]]>
	</fx:Script>
	<s:Label id="lbl" x="327" y="161" text=""/>
	<s:Button id="btn" x="227" y="199" width="220" height="93" label="Start Camera"
			  click="button1_clickHandler(event)"/>
		<s:SpriteVisualElement id="sv" width="{VIDEO_SIZE}" height="{VIDEO_SIZE}"/>
	
</s:Group>
