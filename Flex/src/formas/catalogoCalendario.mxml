<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="676" height="374"
		 label="{nombreCatalogo}" creationComplete="cargaDatos()">
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.UIComponent;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import objectosJava.*;
			import objectosJava.Calendario;
			import objectosJava.Campana;
			
			import spark.events.DropDownEvent;
			import spark.events.GridEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable] public var chanel:String;
			[Bindable] public var message:String;
			[Bindable]public var calendario:Calendario;
			[Bindable]public var campana:Campana;
			[Bindable]public var campanas:ArrayCollection;
			[Bindable]public var datosGridDias:ArrayCollection = new ArrayCollection();
			[Bindable]public var datosCalendarioAll:ArrayCollection;
			[Bindable]public var anio:ArrayCollection;
			[Bindable]public var endpoint:String;
			[Bindable]public var nombreCatalogo:String;
			[Bindable]private var validatorArr:Array;
			[Bindable]private var rangoFechasASeleccionar:Array;
			[Bindable]private var totFechasIniciales:int;
			[Bindable] public var usuariologeado:Usuario;
			[Bindable]private var totInserciones:Array;
			[Bindable]private var flagInsercion:Boolean = false;
			[Bindable]private var flagBuscarFechasIniPreCargadas:Boolean = true;

			
			private function cargaDatos():void
			{
				var fechaActual:Date = new Date();
				
				roCalendario.findAll();
				roCampana.findAll();
				llenaComboAnios();
				roCalendario.findAllByAnio(cbanio.selectedItem);
				allcampanas.selected = true;
				cbcampanas.enabled = false;
				calendariochooser.displayedYear =  fechaActual.getFullYear();
				calendariochooser.displayedMonth = fechaActual.getMonth();
			}
			
			
			private function resultHandlerFindAll(event:ResultEvent):void
			{
				datosCalendarioAll = ArrayCollection(event.result);
				if(flagInsercion)
				{
					MuestraMensajeInserciones();
					flagInsercion = false;
				}
				if(flagBuscarFechasIniPreCargadas)
				{
					buscarDiasEspecialesPreCargados();
				}
				MarcarFechasSeleccionadasInicio();
				
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString,"Error");
			}
			
			private function comboCampanaFindAll(event:ResultEvent):void
			{
				campanas = ArrayCollection(event.result);

			}
			
			private function result_FindAllByAnio(event:ResultEvent):void
			{
				datosGridDias = ArrayCollection(event.result);
				dgdias.dataProvider = datosGridDias;
			}
			
			private function llenaComboAnios():void
			{
				anio = new ArrayCollection();
				var anioactual:Date = new Date();
				var aux:String;
				
				aux = (anioactual.getFullYear()-1).toString();
				anio.addItemAt(aux,0);
				aux = anioactual.getFullYear().toString();
				anio.addItemAt(aux,1);
				aux = (anioactual.getFullYear()+1).toString();
				anio.addItemAt(aux,2);
				
				cbanio.selectedIndex = 1;
				cbanio.dataProvider = anio;
			}
			
			private function campanaChangeHandler(event:Event):void
			{
				var id_camp:int = event.currentTarget.selectedItem.id_camp;
				var id_index:int = event.currentTarget.selectedIndex;
				
				cbcampanas.selectedIndex = id_index;
				
				roCalendario.findByCampanaAnio(id_camp,cbanio.selectedItem);				
			}
			
			private function result_FindByCampanaAnio(event:ResultEvent):void
			{	
				datosGridDias = ArrayCollection(event.result);
				dgdias.dataProvider = datosGridDias;
			}
			
			private function anioChangeHandler(event:Event):void
			{
				var id_IdxAnio:int = event.currentTarget.selectedIndex;
				
				cbanio.selectedIndex = id_IdxAnio;

				if(allcampanas.selected)
				{
					roCalendario.findAllByAnio(cbanio.selectedItem);
				}
				else
				{
					roCalendario.findByCampanaAnio(cbcampanas.selectedItem.id_camp,cbanio.selectedItem);
				}
				
			}
			
			private function cambio_todas_campanas(event:Event):void
			{
				if(allcampanas.selected)
				{
					cbcampanas.selectedIndex = -1;
					cbcampanas.enabled = false;
					roCalendario.findAllByAnio(cbanio.selectedItem);
				}
				else
				{
					cbcampanas.enabled = true;
				}
					
			}
			
			private function fechasRestringidasInicialesInit():void
			{
				var anioactual:Date = new Date();				
				calendariochooser.selectableRange = {rangeStart: new Date((anioactual.getFullYear()-1),0,1), 
					                                   rangeEnd: new Date((anioactual.getFullYear()+1),11,31)};
				//calendariochooser.disabledRanges = [{rangeEnd: new Date(anioactual.getFullYear(),anioactual.getMonth(),anioactual.getDate()-1)}];
				
			}
			
			private function MarcarFechasSeleccionadasInicio():void
			{
				var fechaActual:Date = new Date();
				
				rangoFechasASeleccionar = new Array();
				
				for(var idx:int = 0;idx < datosCalendarioAll.length;idx++)
				{
					var auxCalendario:Object = datosCalendarioAll.getItemAt(idx);
					rangoFechasASeleccionar.push({rangeStart:auxCalendario.fecha_dia,rangeEnd:auxCalendario.fecha_dia});
				}
				
				MostrarFechasSeleccionadas();
				totFechasIniciales = rangoFechasASeleccionar.length;
			}
			
			private function MostrarFechasSeleccionadas():void
			{
				calendariochooser.selectedRanges = rangoFechasASeleccionar;
			}
			
			protected function ChangeCalenarioChooser(evento:CalendarLayoutChangeEvent):void
			{
				var auxFecha:Object;
				
				if(evento.currentTarget.selectedDate == null) 
				{
					return;
				}
				else
				{
					FechaSelected(evento.currentTarget.selectedDate);

				}
				
			}
			
			protected function FechaSelected(fechaSeleccionada:Date):void
			{
				if(totFechasIniciales==rangoFechasASeleccionar.length)
				{
					rangoFechasASeleccionar.push({rangeStart:fechaSeleccionada,rangeEnd:fechaSeleccionada});
				}
				else
				{
					rangoFechasASeleccionar.pop();
					rangoFechasASeleccionar.push({rangeStart:fechaSeleccionada,rangeEnd:fechaSeleccionada});
				}
				
				MostrarFechasSeleccionadas();
			}
						
			protected function nuevaFecha():void
			{
				if(calendariochooser.selectedDate==null)
				{
					Alert.show("Se debe elegir una fecha del calendario","Información");
				}
				else
				{
					if(!FechaSelMenorAFechaActual(calendariochooser.selectedDate))
					{
						if( validaFechaExistente(formatofecha.format(calendariochooser.selectedDate).toString()) )
						{
							Alert.show("Ya existe una fecha especial para el día seleccionado","Información");
						}
						else
						{
							currentState = "altasymodificaciones";
							calendario = new Calendario();
							PreparaNuevaFecha();
						}
					}
					else
					{
						Alert.show("No se puede agregar un día especial con fecha anterior a la fecha actual.","Información.");
					}
				}
				
			}
			
			protected function validaFechaExistente(fechaAvalidar:String):Boolean
			{
				var flagYaExiste:Boolean = false;
				
				for(var idx:int = 0;idx < datosCalendarioAll.length;idx++)
				{
					var aux_calendario:Object = datosCalendarioAll.getItemAt(idx);

					if(fechaAvalidar==formatofecha.format(aux_calendario.fecha_dia).toString())
					{
						flagYaExiste = true;
					}
				}
			
				return flagYaExiste;
			}
			
			protected function Cancelar():void
			{
				currentState = "grid";
				allcampanas.visible=true;
				cbcampanas.visible=true;
			}
			
			protected function PreparaNuevaFecha():void
			{
				cbcampanas.visible=true;
				allcampanas.visible=true;
				allcampanas.selected = false;
				cbcampanas.enabled = true;
				cbcampanas.selectedIndex = -1;
				fecha_dia.text = formatofecha.format(calendariochooser.selectedDate).toString();
				descripcion.text = "";
				descripcion.errorString = "";
				
			}
			
			protected function modificarFecha():void
			{
				if(dgdias.selectedItem!=null)
				{
					currentState = "altasymodificaciones";
					calendario = dgdias.selectedItem as Calendario;
					PreparaModificarFecha(calendario);
				}
				else
				{
					Alert.show("Debe seleccionar un registro.","Información");
				}
				
			}
			
			protected function PreparaModificarFecha(calendario:Calendario):void
			{
				cbcampanas.visible=false;
				allcampanas.visible=false;
				fecha_dia.text = formatofecha.format(calendario.fecha_dia).toString();
				descripcion.text = calendario.descripcion;
			}
			
			protected function save():void
			{ 	
				CargaValidaciones(calendario);
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);
				totInserciones = new Array();

				try
				{
					if(validatorErrorArray.length==0)
					{
						if(calendario.id_calendario==0)
						{
							create();
						}
						else
						{
							update();
						}
					}
					else
					{
						Alert.show("Favor de capturar los datos requeridos * ", "Información");
					}
				}
				catch(errObject:Error)
				{
					Alert.show(errObject.message +' '+ errObject.name,"Error")
				}
				
				
			}
			
			protected function CargaValidaciones(calendario:Calendario):void
			{
				validatorArr = new Array();
				validatorArr.push(SV_descripcion);

				if(!allcampanas.selected)
				{
					validatorArr.push(NV_cbcampanas);
				}
			}
			
			protected function create():void
			{
				//Alert.show("Se debe de crear:"+calendario.id_calendario+"|"+cbcampanas.selectedItem.id_camp+"|"+formatofechaBD.format(calendariochooser.selectedDate)+"|"+descripcion.text+"|"+calendariochooser.selectedDate.fullYear);
				try
				{
					flagInsercion = true;
					if(allcampanas.selected)
					{
						for(var contador:int=0;contador < campanas.length;contador++)
						{
							var aux_campanas:Object = campanas.getItemAt(contador);
							calendario.id_calendario = 0;
							calendario.id_camp=aux_campanas.id_camp;
							calendario.year =  calendariochooser.selectedDate.fullYear.toString();
							calendario.id_dia_especial = 0;
							calendario.fecha_dia = calendariochooser.selectedDate;
							calendario.descripcion = descripcion.text;
							roCalendario.create(calendario);
						}
					}
					else
					{
						calendario.id_calendario = 0;
						calendario.id_camp=cbcampanas.selectedItem.id_camp
						calendario.year =  calendariochooser.selectedDate.fullYear.toString();
						calendario.id_dia_especial = 0;
						calendario.fecha_dia = calendariochooser.selectedDate;
						calendario.descripcion = descripcion.text;
						roCalendario.create(calendario);
					}
				}
				catch(erObject:Error)
				{
					flagInsercion = false;
					Alert.show(erObject.message+erObject.name,"Error");
				}
			}
			
			protected function MuestraMensajeInserciones():void
			{
				var idsInsertados:String = "";
				if(totInserciones.length == 1)
				{
					Alert.show('La nueva fecha especial  '+totInserciones[0].id_calendario+' se creó exitosamente.' ,"Información")
				}
				else
				{
					for(var idx:int=0;idx<totInserciones.length;idx++)
					{
						idsInsertados = idsInsertados + totInserciones[idx].id_calendario.toString();
						if(idx+1 == totInserciones.length)
						{
							idsInsertados = idsInsertados + " ";
						}
						else
						{
							idsInsertados = idsInsertados + ",";
						}
					}
					Alert.show('Las nuevas fechas especiales  '+idsInsertados+' se crearon exitosamente.' ,"Información")
				}

			}
			
			protected function FechaSelMenorAFechaActual(fechaSeleccionada:Date):Boolean
			{
				var fechaActual:Date = new Date();
				
				if(fechaSeleccionada.getFullYear() < fechaActual.getFullYear())
				{
					return true;
				}
				else
				{
					if(fechaSeleccionada.getFullYear() > fechaActual.getFullYear())
					{
						return false;
					}
					else
					{
						if(fechaSeleccionada.getMonth() < fechaActual.getMonth())
						{
							return true;
						}
						else
						{
							if(fechaSeleccionada.getMonth() == fechaActual.getMonth())
							{
								if(fechaSeleccionada.getDate() < fechaActual.getDate())
								{
									return true;
								}
								else
								{
									return false;
								}
							}
							else
							{
								return false;
							}
						}
					}
					
				}
				
			}
			
			protected function update():void
			{
				var fechaActual:Date = new Date();
				
				if(FechaSelMenorAFechaActual(dgdias.selectedItem.fecha_dia))
				{
					Alert.show("No se puede modificar un día especial con fecha anterior a la fecha actual.","Información.");
				}
				else
				{
					try
					{
						calendario.descripcion = descripcion.text;
						roCalendario.update(calendario);
					}
					catch(erObject:Error)
					{
						Alert.show(erObject.message+erObject.name,"Error");
					}
				}	
				
			}
			
			private function resulHandlerNuevoCalendario(event:ResultEvent):void
			{
					calendario = event.result as Calendario;
					totInserciones.push({id_calendario:calendario.id_calendario});
					CondicionInicialDespuesInsertar();

			}
			
			private function CondicionInicialDespuesInsertar():void
			{
				roCalendario.findAllByAnio(cbanio.selectedItem);
				roCalendario.findAll();
				currentState='grid';
				allcampanas.selected = true;
				cbcampanas.selectedIndex = -1;
				cbcampanas.enabled = false;
			}
			
			private function resulHandlerActualizaCalendario(event:ResultEvent):void
			{
				var updateOK:int = event.result as int;
				
				if(updateOK >= 1)
				{
					Alert.show('La fecha especial '+calendario.id_calendario+' se actualizó exitosamente.' ,"Información")
					roCalendario.findAllByAnio(cbanio.selectedItem);
					allcampanas.visible=true;
					cbcampanas.visible=true;
					currentState='grid';
				}else{
					Alert.show('La fecha especial '+calendario.id_calendario+' no se actualizó.' ,"Información")
				}
			}
			
			protected function eliminar():void
			{
				var fechaActual:Date = new Date();
				
				if(dgdias.selectedItem != null)
				{
					if(FechaSelMenorAFechaActual(dgdias.selectedItem.fecha_dia))
					{
						Alert.show("No se puede eliminar un día especial con fecha anterior a la fecha actual.","Información.");
					}
					else
					{
						Alert.show("¿Está seguro de eliminar la fecha especial?","Información",Alert.OK|Alert.NO,this,remove,null,Alert.OK);
					}	
				}
				else
				{
					Alert.show("Debe seleccionar un registro","Información");
				}
			}
			
			protected function remove(event:CloseEvent):void
			{
				if(event.detail==Alert.OK)
				{
					calendario = dgdias.selectedItem as Calendario;
					roCalendario.remove(calendario);
				}
			}
			
			private function resulHandlerEliminarCalendario(event:ResultEvent):void
			{
				var flagOk:int = event.result as int
				
				if(flagOk >= 1)
				{
					Alert.show('El día especial '+calendario.id_calendario+' se eliminó exitosamente.' ,"Información")
					roCalendario.findAllByAnio(cbanio.selectedItem);
					currentState='grid';
					roCalendario.findAll();
				}
				else
				{
					Alert.show('El dia especial '+calendario.id_calendario+' no se pudo eliminar. ' ,"Información")
				}
			}
		
			private function buscarDiasEspecialesPreCargados():void
			{
				var fechaActual:Date = new Date();
				var fechaAux:Date = fechaActual;
				var anioSiguiente:int = fechaActual.getFullYear()+1;
				var diasHabiles:int = 0;
				
				if( fechaActual.getMonth()==11 )
				{
					for(var idx:int=31;idx>15;idx--)
					{
						fechaAux = new Date(fechaActual.getFullYear(),11,idx);
						if( (fechaAux.getDay()==0)||(fechaAux.getDay()==6)||(fechaAux.getDate()==25) )
						{
							continue;
						}
						else
						{
							diasHabiles = diasHabiles + 1;
						}
						if(diasHabiles == 7){break;}
					}
					
					if(fechaActual >= fechaAux)
					{
						if(!ExistenDiasEspecialesAnioSiguiente())
						{
							Alert.show("Debe configurar los Días Especiales del Siguiente Año ("+anioSiguiente+") ¿Desea dar de alta las fechas especiales por defecto?","Información",Alert.YES|Alert.NO,this,darAltaDiasEspecialesDefault,null,Alert.YES);
						}
					}
				}
				else
				{
					flagBuscarFechasIniPreCargadas = false;
				}
								
				
			}
			
			private function darAltaDiasEspecialesDefault(event:CloseEvent):void
			{
				var anio:Date = new Date();
				var aniosig:int = anio.getFullYear()+1;
				var arrDiasEspecialesDefault:Array = new Array();

				
				
				if(event.detail==Alert.YES)
				{
					arrDiasEspecialesDefault.push({dia:new Date(aniosig,0,1),descripcion:"Año nuevo"});
					arrDiasEspecialesDefault.push({dia:getPrimerLunesDeFebrero(),descripcion:"Día de la Constitución"});
					arrDiasEspecialesDefault.push({dia:getTercerLunesDeMarzo(),descripcion:"Natalicio de Don Benito Juárez"});
					arrDiasEspecialesDefault.push({dia:new Date(aniosig,4,1),descripcion:"Día del Trabajo"});
					arrDiasEspecialesDefault.push({dia:new Date(aniosig,8,16),descripcion:"Día de la Independencia"});
					arrDiasEspecialesDefault.push({dia:getTercerLunesDeNoviembre(),descripcion:"Día de la Revolución Mexicana"});
					arrDiasEspecialesDefault.push({dia:new Date(aniosig,11,25),descripcion:"Día de Navidad"});
					calendario = new Calendario();
					arrDiasEspecialesDefault.forEach(MeteDiasEspeciales);
					
					flagBuscarFechasIniPreCargadas = false;
				}
				else
				{
					flagBuscarFechasIniPreCargadas = false;
				}
				
			}
			
			private function MeteDiasEspeciales(elemento:*,idx:int,arr:Array):void
			{
				var anioActual:Date = new Date();
				
				for(var contador:int=0;contador < campanas.length;contador++)
				{
					var aux_campanas:Object = campanas.getItemAt(contador);
					calendario.id_calendario = 0;
					calendario.id_camp=aux_campanas.id_camp;
					calendario.year =  (anioActual.getFullYear()+1).toString();
					calendario.id_dia_especial = 0;
					calendario.fecha_dia = elemento.dia;
					calendario.descripcion = elemento.descripcion;
					roCalendario.create(calendario);
				}
				roCalendario.findAll();
				
			}
			
			private function getPrimerLunesDeFebrero():Date
			{
				var fechaActual:Date = new Date();
				var anioSig:int = fechaActual.getFullYear()+1;
				var fechaAux:Date = new Date();
				
				for(var idx:int=1;idx<7;idx++)
				{
					fechaAux = new Date(anioSig,1,idx);
					if(fechaAux.getDay()==1)
					{
						break;
					}
					
				}
				
				return fechaAux;
				
			}
			
			private function getTercerLunesDeMarzo():Date
			{
				var fechaActual:Date = new Date();
				var anioSig:int = fechaActual.getFullYear()+1;
				var fechaAux:Date = new Date();
				var totLunes:int = 0;
				
				for(var idx:int=1;idx<26;idx++)
				{
					fechaAux = new Date(anioSig,2,idx);
					if(fechaAux.getDay()==1)
					{
						totLunes = totLunes+1;
						if(totLunes==3)
						{
							break;
						}
					}
					
				}
				
				return fechaAux;
				
			}
			
			private function getTercerLunesDeNoviembre():Date
			{
				var fechaActual:Date = new Date();
				var anioSig:int = fechaActual.getFullYear()+1;
				var fechaAux:Date = new Date();
				var totLunes:int = 0;
				
				for(var idx:int=1;idx<26;idx++)
				{
					fechaAux = new Date(anioSig,10,idx);
					if(fechaAux.getDay()==1)
					{
						totLunes = totLunes+1;
						if(totLunes==3)
						{
							break;
						}
					}
					
				}
				
				return fechaAux;
				
			}
			
			private function ExistenDiasEspecialesAnioSiguiente():Boolean
			{
				var totExistentes:int = 0;
				var anioActual:Date = new Date();
				var anioSiguiente:int = anioActual.getFullYear()+1;
				
				for(var idx:int = 0;idx < datosCalendarioAll.length;idx++)
				{
					var aux_calendario:Object = datosCalendarioAll.getItemAt(idx);
					
					if(aux_calendario.fecha_dia.getFullYear()==anioSiguiente)
					{
						if(aux_calendario.descripcion == "Año nuevo" ||
						   aux_calendario.descripcion == "Día de la Constitución" ||
						   aux_calendario.descripcion == "Natalicio de Don Benito Juárez" ||
						   aux_calendario.descripcion == "Día del Trabajo" ||
						   aux_calendario.descripcion == "Día de la Independencia" ||
						   aux_calendario.descripcion == "Día de la Revolución Mexicana" ||
						   aux_calendario.descripcion == "Día de Navidad")
						{
							totExistentes = totExistentes + 1;
						}
					}
				}
				if(totExistentes < 7)
				{
					return false;
				}
				else
				{
					return true;
				}
			}
			
			
			protected function UbicarFechaEnCalendario(event:GridEvent):void
			{
				var fechaSeleccionada:Date = event.currentTarget.selectedItem.fecha_dia;
				
				calendariochooser.displayedYear =  fechaSeleccionada.getFullYear();
				calendariochooser.displayedMonth = fechaSeleccionada.getMonth();
			}
			
		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="grid"/>
		<s:State name="altasymodificaciones"/>
	</mx:states>
	<fx:Declarations>
		<s:RemoteObject id="roCalendario" destination="CalendarioService" fault="faultHandler(event)" endpoint="{endpoint}">
			<s:method name="findAll" result="resultHandlerFindAll(event)" fault="faultHandler(event)"/>
			<s:method name="findByCampanaAnio" result="result_FindByCampanaAnio(event)" fault="faultHandler(event)"/>
			<s:method name="findAllByAnio" result="result_FindAllByAnio(event)" fault="faultHandler(event)"/>
			<s:method name="create" result="resulHandlerNuevoCalendario(event)" fault="faultHandler(event)"/>
			<s:method name="update" result="resulHandlerActualizaCalendario(event)" fault="faultHandler(event)"/>
			<s:method name="remove" result="resulHandlerEliminarCalendario(event)" fault="faultHandler(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="roCampana" destination="CampanaService" fault="faultHandler(event)" endpoint="{endpoint}">
			<s:method name="findAll" result="comboCampanaFindAll(event)" fault="faultHandler(event)"/>
		</s:RemoteObject>
		
		<mx:DateFormatter id="formatofecha" formatString="YYYY-MM-DD"/>

		<mx:StringValidator id="SV_descripcion" source="{descripcion}" property="text" required="true" requiredFieldError="Capture la descripción." minLength="3" tooShortError="Complete la descripción."/>
		<mx:NumberValidator id="NV_cbcampanas" source="{cbcampanas}" property="selectedIndex" required="false" minValue="0" lowerThanMinError="Seleccione alguna opción"/>
		<!--<mx:StringValidator id="SV_allcampanas" source="{allcampanas}" property="selected" required="false" minLength="4" tooShortError="Seleccionar."/>-->
	</fx:Declarations>
	
	<s:DataGrid id="dgdias" includeIn="grid" x="10" y="118" width="400" height="231"
				doubleClickEnabled="true" gridDoubleClick="UbicarFechaEnCalendario(event)">
		<s:columns>
			<s:ArrayCollection>
				<s:GridColumn width="50" dataField="id_calendario" headerText="ID"></s:GridColumn>
				<s:GridColumn width="100" dataField="fecha_dia" formatter="{formatofecha}" headerText="Fecha"></s:GridColumn>
				<s:GridColumn dataField="descripcion" headerText="Descripción"></s:GridColumn>
			</s:ArrayCollection>
		</s:columns>
	</s:DataGrid>
	
	<s:ComboBox id="cbcampanas" x="10" y="39" width="157" dataProvider="{campanas}" labelField="nombre_camp" change="campanaChangeHandler(event)"/>
	<s:ComboBox id="cbanio" includeIn="grid" x="10" y="70" change="anioChangeHandler(event)"/>
	<s:CheckBox id="allcampanas" x="10" y="12" label="Todas las Campañas" click="cambio_todas_campanas(event)"/>
	
	<mx:DateChooser id="calendariochooser" includeIn="grid" x="471" y="10" width="195" height="165" creationComplete="fechasRestringidasInicialesInit()" yearNavigationEnabled="true"
					selectionIndicatorSkin="@Embed('../image/DCPro_CalenSel.png')"
					showToday="false" change="ChangeCalenarioChooser(event)"/>
	
	<s:FormItem includeIn="altasymodificaciones" y="80" left="10" right="386" label="Fecha:">
		<s:TextInput id="fecha_dia" left="80" width="100" text="{calendario.fecha_dia}" editable="false"/>
	</s:FormItem>
	<s:FormItem width="460"  x="11" y="120" label="Descripción" required="true" includeIn="altasymodificaciones">
		<s:TextInput id="descripcion" width="200" text="{calendario.descripcion}"/>
	</s:FormItem>
	
	<s:VGroup includeIn="grid" x="471" y="174" width="195" height="138" verticalAlign="middle" horizontalAlign="center">
		<s:Button x="471" y="183" width="127" label="Agregar Fecha" click="nuevaFecha()"/>
		<s:Button x="471" y="215" width="127" label="Eliminar Fecha" click="eliminar()"/>
		<s:Button x="471" y="247" width="127" label="Editar Fecha" click="modificarFecha()"/>
		<!--<s:Button x="471" y="279" width="127" label="Guardar"/>-->
		<s:Button x="619" y="340" width="127" label="Cerrar" click="parent.removeChild(this)"/>
	</s:VGroup>
	<s:VGroup includeIn="altasymodificaciones" x="471" y="174" width="195" height="138" verticalAlign="middle" horizontalAlign="center">
		<s:Button x="471" y="215" width="127" label="Guardar" click="save()"/>
		<s:Button x="471" y="247" width="127" label="Cancelar" click="Cancelar()"/>
	</s:VGroup>
</mx:Canvas>
