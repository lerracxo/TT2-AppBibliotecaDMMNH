<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="762" height="360"
		   label="{nombreCatalogo}" creationComplete="cargaDatos()">
	
	<fx:Metadata>
		[Event(name="outCreated", type="OutBounEvent")]
		[Event(name="outUpdated", type="OutBoundEvent")]
		[Event(name="outDeleted", type="OutBoundEvent")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.data.ChangeObject;
			import mx.data.ChangedItems;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import objectosJava.*;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable] public var chanel:String;
			[Bindable] public var message:String;
			[Bindable] public var usuariologeado:Usuario;
			[Bindable] public var endpoint:String;
			[Bindable] public var nombreCatalogo:String;
			[Bindable] public var id_camp:int;
			[Bindable] public var dgRowIndex:int;
			[Bindable] public var datosCampanias:ArrayCollection;
			[Bindable] public var resultadosDisponibles:ArrayCollection;
			[Bindable] public var resultadosAsignados:ArrayCollection;
			[Bindable] public var originalesDisponibles:ArrayCollection;
			[Bindable] public var originalesAsignados:ArrayCollection;
			[Bindable] public var tmpDisponibles:ArrayCollection;
			[Bindable] public var tmpAsignados:ArrayCollection;
			[Bindable] public var tmpResultado:ResultadosOutbound;
			[Bindable] public var bndNombreValido:int;
			[Bindable] public var contadorBase:int;
			[Bindable] public var bndEliminaTodasAsig:int;
			[Bindable] public var indiceAsignados:int;
			[Bindable] public var listaAsignados:ArrayCollection;
			[Bindable] public var resultadoOutTmp:ResultadosOutbound;
			[Bindable] public var bndEliminaResultadoDisponible:int;//Esta variable puede contener uno de los siguientes valores
																	// 0 No eliminar un elemento del datagrid de Resultados Disponibles
																	// 1 Le indica al sistema que se desea eliminar un elemento del datagrid de Resultados Disponibles
			[Bindable] public var bndEliminaResultadoAsignado:int;//Esta variable puede contener uno de los siguientes valores
																	// 0 No eliminar un elemento del datagrid de "Campania" (Resultados asignados)
																	// 1 Le indica al sistema que se desea eliminar un elemento del datagrid de "Campania" (Resultados asignados)
			[Bindable] public var bndError:int; //Esta variable indica si se realizaron los cambios al
												//presionar el botón "Guardar"
												// 0 NO Existió error
												// 1 Existió un error y no se guardaron los cambios
			
			[Bindable] public var bndNumeroCambios:int; //Esta bandera permitirá preguntrle al usuario
														// si desea cerrar la ventana sin guardar los
														// cambios
			[Bindable] public var bndCerrarVentana:int;
			[Bindable] public var id_res_out_todasCampanias:int;
			[Bindable] public var valCambios:int;
			[Bindable] public var cmbaux:int;
			
			
			private function cargaDatos():void{
				//inicialización de variables
				valCambios=0;
				bndNumeroCambios = 0;
				bndCerrarVentana = 0;
				bndError = 0;          	//Indica si existió al gun error al intentar guardar cambios
										// 0 No existió error
										// 1 Existió un error al intentar guardar los cambios				
				//Deshabilita todos los campos y botones excepto el de
				// "Editar"
				// "Salir"
				Prepara_Form();
			}

			private function Cancela_Edicion():void{
				//Inicialización de variables
				bndNumeroCambios= 0;
				
				//Inicializa las variables, deshabilita todos los campos y botonoes,
				//Excepto el de 
				//"Editar"
				//"Salir"
				Prepara_Form();
				btnEditar.enabled = true;
				valCambios=0;
			}

			//Botón SALIR
			private function finPopUp():void {
				//Cierra la ventana
				parent.removeChild(this)
			}

			private function Prepara_Form():void{
				//Deshabilita todos los campos y botones excepto el de
				// "Editar"
				// "Salir"
				
				if (datosCampanias != null){
					datosCampanias.removeAll();
				}
				
				//Inicialización de variables
				originalesAsignados = new ArrayCollection();
				resultadosDisponibles = new ArrayCollection();
				resultadosAsignados = new ArrayCollection();
				datosCampanias = new ArrayCollection();
				bndError = 0;

				//Inicialización de objetos
				txtResNuevo.text = "";
				cbxCampania.dataProvider = datosCampanias;
				dgCampania.dataProvider = resultadosAsignados;
				dgDisponibles.dataProvider = resultadosDisponibles;
				dgCampania.enabled = false;
				dgDisponibles.enabled= false;
				cbxCampania.enabled = false;
				DeshabilitaBotones_ResDisponibles();
				DeshabilitaBotones_ResAsignados();
				btnEditar.enabled = true;
				btnGuardar.enabled = false;
				btnCancelar.enabled = false;
				txtResNuevo.enabled = false;
				cbxCampania.enabled = false;
				chkTodas.selected = false;
				chkTodas.enabled = false;
				btnAgregarResultado.enabled = false;

				//Inicializacion de variables
				contadorBase= 0;  //Cuenta el numero de resultados base existentes en el DG de " ResultadosAsignados"
				bndEliminaTodasAsig = 0;
				bndEliminaResultadoDisponible = 0;//Esta variable puede contener uno de los siguientes valores:
													// 0 No eliminar un elemento del datagrid de Resultados Disponibles
													// 1 Le indica al sistema que se desea eliminar un elemento del datagrid de Resultados Disponibles
				bndEliminaResultadoAsignado = 0;//Esta variable puede contener uno de los siguientes valores
													// 0 No eliminar un elemento del datagrid de "Campania" (Resultados asignados)
													// 1 Le indica al sistema que se desea eliminar un elemento del datagrid de "Campania" (Resultados asignados)
			}
			
			private function Activa_Edicion():void{
				dgCampania.enabled = true;
				dgDisponibles.enabled= true;
				btnEditar.enabled = true;
				//btnGuardar.enabled = true;
				btnCancelar.enabled = true;
				txtResNuevo.enabled = true;
				txtResNuevo.text = null;
				cbxCampania.enabled = true;
				chkTodas.enabled = true;
				btnAgregarResultado.enabled = true;
				cbxCampania.selectedIndex = -1;
				
				//buscaCampañasPorTipo
				// El primer parámetro es el tipo de campaña, donde:
				// 0 Campaña outbound
				// 1 Campaña inbound 
				// El segundo parámetro es el id_usuario 
				roCampaniaServicio.buscaCampanasPorTipo(0 );	
				btnEditar.enabled = false;
			}
			
			private function AddItem():void{
				var resultadoOutbound:ResultadosOutbound = new ResultadosOutbound();
				var localDisponibles:ArrayCollection = dgDisponibles.dataProvider as ArrayCollection;
				var localAsignados:ArrayCollection = dgCampania.dataProvider as ArrayCollection;
				var indice:int;
				
				//Validar que el usuario haya seleccionado una campaña
				if (localAsignados == null || localAsignados.length == 0){
					localAsignados = new ArrayCollection();
					Alert.show("Es necesario elegir una campaña","Error");
				}else{
					indice=dgDisponibles.selectedIndex; 
					if( indice != -1){
						valCambios=1;
						resultadoOutbound.id_res_out = localDisponibles.getItemAt(indice).id_res_out;
						if (chkTodas.selected == true) 
							resultadoOutbound.id_c_camp = 0;
						else
							resultadoOutbound.id_c_camp = int(cbxCampania.selectedItem.id_camp);
						resultadoOutbound.resultado =  localDisponibles.getItemAt(indice).resultado;
						resultadoOutbound.descripcion =  localDisponibles.getItemAt(indice).descripcion;
						resultadoOutbound.estatus =  localDisponibles.getItemAt(indice).estatus;
						
						localDisponibles.removeItemAt(indice);
						localAsignados.addItem(resultadoOutbound);
						
						if (localDisponibles.length ==0)
							DeshabilitaBotones_ResDisponibles();
						else
							HabilitaBotones_ResDisponibles();
						
						//Actualiza los arreglos globales
						resultadosDisponibles = localDisponibles;
						resultadosAsignados = localAsignados;
						dgCampania.dataProvider = resultadosAsignados;
						
						if (resultadosAsignados.length == 0 )
							DeshabilitaBotones_ResAsignados();
						else
							HabilitaBotones_ResAsignados();
						
						//Actualiza el número de cambios en el datagrid de Resultados Asignados
						bndNumeroCambios++;
						
					}else
						Alert.show("Favor de seleccionar un resultado disponible","Información");
				}			
			}
			
			private function RemoveItem():void{
				var resultadoOutbound:ResultadosOutbound = new ResultadosOutbound();
				var listaBase:Array;
				var indice:int;
				
				//inicialización de variables
				listaBase = [1,2,3,4,5,6,7,8,9,10,11,12];
				
				indice=dgCampania.selectedIndex; 
				if( indice != -1){
					//resultadoOutbound= ResultadosOutbound(dgCampania.selectedItem);
					valCambios=1;
					resultadoOutbound.id_res_out = int(dgCampania.selectedItem.id_res_out);
					resultadoOutbound.id_c_camp   = int(dgCampania.selectedItem.id_c_camp);
					resultadoOutbound.resultado = String(dgCampania.selectedItem.resultado);
					resultadoOutbound.descripcion = String(dgCampania.selectedItem.descripcion);
					resultadoOutbound.estatus = int(dgCampania.selectedItem.estatus);
					
					if (resultadoOutbound.id_res_out == 0) {			
						resultadosAsignados.removeItemAt(indice);
						resultadosDisponibles.addItem(resultadoOutbound);
						
					}else{
						//Valida la que no se trate de un registro base
						bndEliminaTodasAsig = 0;
						bndEliminaResultadoAsignado = 1;
						indiceAsignados = indice;
						
						if (Busca_ResultadoBase(listaBase, resultadoOutbound.id_res_out) == 0){
							resultadosAsignados.removeItemAt(indice);
							resultadosDisponibles.addItem(resultadoOutbound);
							dgDisponibles.dataProvider = resultadosDisponibles;
							bndNumeroCambios++;
							
							if (resultadosAsignados.length == 0)
								DeshabilitaBotones_ResAsignados();
							
							if (resultadosDisponibles.length != 0) 
								HabilitaBotones_ResDisponibles();
						}else{
							Alert.show("Se trata de un registro base, por lo que no puede ser eliminado","Información");
						}	
					}
				}else
					Alert.show("Favor de seleccionar un resultado asignado","Información");	
			}

			private function AddAllItems():void {
				var resultadoOutbound:ResultadosOutbound;
				var localDisponibles:ArrayCollection = dgDisponibles.dataProvider as ArrayCollection;
				var localAsignados:ArrayCollection = dgCampania.dataProvider as ArrayCollection;
				
				if (localAsignados == null || localAsignados.length == 0){
					localAsignados = new ArrayCollection();
					Alert.show("Es necesario elegir una campaña","Error");
				}else{
					if (localDisponibles.length >   0){
						for (var d:int=0; d<localDisponibles.length; d++){
							resultadoOutbound = new ResultadosOutbound();
							
							//resultadoOutbound = ResultadosOutbound(localDisponibles.getItemAt(d));
							resultadoOutbound.id_res_out = int(localDisponibles.getItemAt(d).id_res_out);
							if (chkTodas.selected == true) 
								resultadoOutbound.id_c_camp = 0;
							else
								resultadoOutbound.id_c_camp = int(cbxCampania.selectedItem.id_camp);
							resultadoOutbound.resultado   =   String(localDisponibles.getItemAt(d).resultado);
							resultadoOutbound.descripcion =   String(localDisponibles.getItemAt(d).descripcion);
							resultadoOutbound.estatus     =   int(localDisponibles.getItemAt(d).estatus);
							
							localAsignados.addItem(resultadoOutbound);
							valCambios=1;
						}
						localDisponibles.removeAll();
						DeshabilitaBotones_ResDisponibles();
						
						//Regresa los datos a los Arreglos que sirven como "Proveedor de datos"
						resultadosAsignados=localAsignados;
						resultadosDisponibles = localDisponibles;
						if (resultadosAsignados.length != 0){
							HabilitaBotones_ResAsignados();
						}
						bndNumeroCambios++;
					}else
						Alert.show("No existen resultados disponibles","Error");
				}
			}

			private function RemoveAllItems():void{
				var resultadoOutbound:ResultadosOutbound;
				var localDisponibles:ArrayCollection = dgDisponibles.dataProvider as ArrayCollection;
				var localAsignados:ArrayCollection = dgCampania.dataProvider as ArrayCollection;
				var listaTmpEliminados:ArrayCollection = new ArrayCollection();
				var listaBase:Array;
				var indice:int;
				var indiceJ:int;
				var contBase:int;

				//Inicializacion de variables
				listaBase = [1,2,3,4,5,6,7,8,9,10,11,12];
				trace(listaBase);
				
				if (localAsignados.length >   0){
					for ( indice =localAsignados.length-1; indice>= 0 ; indice--){
						resultadoOutbound = new ResultadosOutbound();
						
						//resultadoOutbound = ResultadosOutbound(localDisponibles.getItemAt(d));
						resultadoOutbound.id_res_out = int(localAsignados.getItemAt(indice).id_res_out);
						if (chkTodas.selected == true) 
							resultadoOutbound.id_c_camp = 0;
						else
							resultadoOutbound.id_c_camp = int(cbxCampania.selectedItem.id_camp);
						resultadoOutbound.resultado   =   String(localAsignados.getItemAt(indice).resultado);
						resultadoOutbound.descripcion =   String(localAsignados.getItemAt(indice).descripcion);
						resultadoOutbound.estatus     =   int(localAsignados.getItemAt(indice).estatus);
					
						//debug
						//Alert.show(String(resultadoOutbound.id_res_out)+" "+ resultadoOutbound.resultado,"Antes del if");
						//Fin del debug
						
						if (Busca_ResultadoBase(listaBase, resultadoOutbound.id_res_out) == 0){	
							//Alert.show(String(resultadoOutbound.id_res_out)+" "+ resultadoOutbound.resultado,"No es registro base");
							
							//No es registro base, por lo que si es posible eliminarlo
							listaTmpEliminados.addItem({id_res_out:resultadoOutbound.id_res_out,
														id_c_camp:resultadoOutbound.id_c_camp,
														resultado:resultadoOutbound.resultado,
														descripcion:resultadoOutbound.descripcion,
														estatus:resultadoOutbound.estatus});
							localAsignados.removeItemAt(indice);
							//localDisponibles.addItem(resultadoOutbound);
						}else{
							contBase++;
						}
					}

					//Alert.show(String(listaTmpEliminados.length),"Longitud del listaTmpEliminados");
					if (listaTmpEliminados.length > 0 ){
						indiceJ=0;
						for (indice = listaTmpEliminados.length-1; indice >= 0 ; indice-- ){
							resultadoOutbound = new ResultadosOutbound();

							resultadoOutbound.id_res_out = int(listaTmpEliminados.getItemAt(indice).id_res_out);
							if (chkTodas.selected == true) 
								resultadoOutbound.id_c_camp = 0;
							else
								resultadoOutbound.id_c_camp = int(cbxCampania.selectedItem.id_camp);
							resultadoOutbound.resultado   =   String(listaTmpEliminados.getItemAt(indice).resultado);
							resultadoOutbound.descripcion =   String(listaTmpEliminados.getItemAt(indice).descripcion);
							resultadoOutbound.estatus     =   int(listaTmpEliminados.getItemAt(indice).estatus);

							//copiar los registros al DG "disponibles"
							localDisponibles.addItem(ResultadosOutbound( resultadoOutbound));
						}
						bndNumeroCambios++;
					}
					
					if (contBase > 0 )
						Alert.show("Existen registros base que no pueden ser eliminados","Información");

					if (localAsignados.length == 0)
						DeshabilitaBotones_ResAsignados();
					
					//Regresa los datos a los Arreglos que sirven como "Proveedor de datos"
					resultadosAsignados=localAsignados;
					resultadosDisponibles = localDisponibles;
					
					if (resultadosDisponibles.length > 0 )
						HabilitaBotones_ResDisponibles();
					valCambios=1;
				}else
					Alert.show("No existen resultados asignados","Error");
			}
			
			private function Busca_ResultadoBase(listaBase:Array, id_res_out:int):int{
				var respuesta:int;
				
				//Inicializacion de variables
				respuesta = 0;   //No es registro base
				
				for (var indice:int=0; indice < listaBase.length; indice++ ){
					if (listaBase[indice] == id_res_out){
						respuesta = 1; 	// Es un registro BASE
						break;			//Finaliza la búsqueda
					}
				}
				return respuesta;
			}

			private function Guarda_Resultados():void{
				var cadena:String;
				
				//Inicialización de variables
				bndError = 0;       // 0 No existio error al guardar los datos
				
				if ( resultadosAsignados == null || resultadosAsignados.length == 0 ){
					Alert.show("No existen registros para guardar","Error");
					
					//Si el usuario desea cerrar la ventana
					if (bndCerrarVentana == 1 )
						this.finPopUp();
				}else{ 	
					if (chkTodas.selected == true)
						cadena = "todas las campañas";
					else
						cadena = "la campaña";
					Alert.show("¿Está seguro de los cambios en los Resultados Outbound para "+cadena+"? ","Información",Alert.OK| Alert.NO,this,Update,null,Alert.OK);
				}
			}
			
			private function Update(eventObj:CloseEvent):void{
				var indice:int;
				var longitud:int;
				var localAsignados:ArrayCollection;    // 
				var localOriginales:ArrayCollection = new ArrayCollection();
				var localDisponibles:ArrayCollection = new ArrayCollection();
				var resultadoOutbound:ResultadosOutbound;
				var id_res_out:int;
				var bndRegistroLocalizado:int;//Esta variable puede contener uno de los siguientes valores
												//0 registro no localizado
												//1 Registro localizado en el arreglo "Disponibles"
												//2 Registro localizado en el arreglo "Asignados"
				//Inicialización de variables
				bndError = 0;
				 
				//Inicialización de variables
				localAsignados = new ArrayCollection();
				
				localAsignados   = resultadosAsignados;
				localOriginales  = originalesAsignados;
				localDisponibles = resultadosDisponibles;
				if (localOriginales.length!=0){
					for(var indiceJ:int = 0; indiceJ<localOriginales.length;indiceJ++ ){
						for (indice = 0; indice < localAsignados.length; indice++){
						//Alert.show("Estatus = "+String(localAsignados.getItemAt(indice).estatus),"Antes de comenzar la búsqueda "+String(localAsignados.getItemAt(indice).id_res_out));
							if (int(localOriginales.getItemAt(indiceJ).id_res_out) == int(localAsignados.getItemAt(indice).id_res_out)){
								//Actualiza el estatus
								localOriginales.getItemAt(indiceJ).estatus = localAsignados.getItemAt(indice).estatus;
								break;
							}
						}
					}
				}

				//Realiza una comparación del arreglo de "Originales" 
				// versus "Asignados"
				//y dependiendo de dónde se localiza cada elemento del arreglo original,
				//se realizan las acciones correspondientes.
				
				//Si el elemento del arreglo "original" 
				// '0' no se encuentra. Entonces Se elimina de la tabla 'c_campana_resultadosout'
				//     y también de la tabla 'c_resultados_outbo'.
				//     lo cual lo realiza mediante la BD al eleiminar elementos en cascada
				// '1' se localiza dentro del arreglo 'Disponibles'. Entonces se elimina de la tabla 'c_campana_resultadosout'
				// '2' Se localiza en el arreglo 'Asignados'. Entonces se actualiza el estatus
				if(eventObj.detail==Alert.OK){
					
					//Se realiza una búsqueda que permite identificar los  nuevos elementos 
					//agregados al arreglo de "resultadosAsignados" y de ser así,
					//entonces se inserta el nuevo registro en la tabla "c_campana_resultadosout"
					//Alert.show("Antes de comparar 'Asignados' vs 'Originales' ","Informacion");
					if (localAsignados != null){
						longitud = localAsignados.length;
						if (longitud > 0 ){
							for(indice=0; indice < longitud; indice++ ){		
								resultadoOutbound = new ResultadosOutbound();
								resultadoOutbound.id_res_out = int(localAsignados.getItemAt(indice).id_res_out);
								resultadoOutbound.id_c_camp = int(localAsignados.getItemAt(indice).id_c_camp);
								resultadoOutbound.resultado = String(localAsignados.getItemAt(indice).resultado);
								resultadoOutbound.descripcion = String(localAsignados.getItemAt(indice).descripcion);
								resultadoOutbound.estatus = int(localAsignados.getItemAt(indice).estatus);

								//Alert.show("resultadosAsignados.ID_RESULTADO = "+resultadoOutbound.id_res_out+" Estatus = "+resultadoOutbound.estatus,"Antes de Busca_NuevosAsignados()");
								Busca_NuevosAsignados(resultadoOutbound);
							}
						}
					}

					//Una vez que se relizó la búsqueda de los elementos 
					//"originalesAsignados", para determinar si se realiza una actualización o 
					//una eliminación del resultadosOriginal 
					if (localOriginales!= null){
						longitud = localOriginales.length;
						if (longitud > 0 ){
							//Alert.show("Antes de comparar 'Originales' vs 'Asignados' ","Informacion");
							for(indice=longitud-1; indice >= 0; indice-- ){
								bndRegistroLocalizado = 0;

								//Busca en el DataGrid "Asignados"
								bndRegistroLocalizado = BuscaOriginalEnAsignados(int(localOriginales.getItemAt(indice).id_res_out), localAsignados);

								//El registro no se localizó en el arreglo "Disponibles"
								if (bndRegistroLocalizado == 0){
									bndRegistroLocalizado = BuscaOriginalEnDisponibles(int(localOriginales.getItemAt(indice).id_res_out), localDisponibles);
								}

								//Realiza la accion correspondienta al valor de la variable bndRegistroLocalizado
								switch (bndRegistroLocalizado){
									case 1:
										//Registro localizado en el Datagrid Disponibles
										resultadoOutbound = new ResultadosOutbound();
										resultadoOutbound.id_res_out = int(localOriginales.getItemAt(indice).id_res_out);
										resultadoOutbound.id_c_camp = int(localOriginales.getItemAt(indice).id_c_camp);
										resultadoOutbound.resultado = String(localOriginales.getItemAt(indice).resultado);
										resultadoOutbound.descripcion = String(localOriginales.getItemAt(indice).descripcion);
										resultadoOutbound.estatus = int(localOriginales.getItemAt(indice).estatus);

										//Actualiza el arreglo de  "Resultados originales"
										//Elimina el resultado localizado en el datagrid de resultados disponiobles
										localOriginales.removeItemAt(indice);

										//Alert.show("ID_RES_OUT = "+String(resultadoOutbound.id_res_out),"Registro localizado en el Datagrid Disponibles");
										Elimina_Integracion(resultadoOutbound);
										break;
									case 2:
										//Registro localizado en el DataGrid "Asignados"
										resultadoOutbound = new ResultadosOutbound();
										resultadoOutbound.id_res_out = int(localOriginales.getItemAt(indice).id_res_out);
										resultadoOutbound.id_c_camp = int(localOriginales.getItemAt(indice).id_c_camp);
										resultadoOutbound.resultado = String(localOriginales.getItemAt(indice).resultado);
										resultadoOutbound.descripcion = String(localOriginales.getItemAt(indice).descripcion);
										//Obtiene el estatus actualizado
										resultadoOutbound.estatus = localOriginales.getItemAt(indice).estatus;

										//Alert.show("ID_RES_OUT = "+String(resultadoOutbound.id_res_out),"Registro localizado en el Datagrid Asignados");
										Actualiza_Integracion(resultadoOutbound);
										break;
								}
							}
						}
					}

					if (bndError == 0) {
						//Inicialización de variables
						bndNumeroCambios = 0;

						//Informa al usuario del éxito al guardar los cambios
						Alert.show("Se han guardado todos los cambios satisfactoriamente ","Información");

						//Deshabilita botones y limpia los datos de la pantalla 
						Prepara_Form();
						
						//Si presionó el boton cerrar ventana
						if (bndCerrarVentana ==1 ) {
							this.finPopUp();
						}
					}else{
						Alert.show("Existió un error al intentar guardar los cambios","Error");
					}
				}
				valCambios=0;
			}
			
			private function BuscaOriginalEnDisponibles(id_res_out:int, localDisponibles:ArrayCollection):int{
				var respuesta:int;//Esta variable puede contener uno de los siguientes valores
									// 0 Resgitro no localizado en "Disponibles"
									// 1 Registro localizado en "Disponibles"
				var longitud:int;
				
				
				//Inicialización de variables
				respuesta = 0;
				
				if (localDisponibles != null ) {
					longitud = localDisponibles.length;
					//Alert.show("longitud = "+String(longitud),"BuscaOriginalEnDisponibles()");
					if (longitud > 0){
						for (var indice:int = longitud-1; indice >=0 ; indice--){
							
							//Busca la existencia del ID_RESULTADO en el arreglo de "disponibles"
							if (id_res_out== int(localDisponibles.getItemAt(indice).id_res_out)){
								
								// 1 Registro localizado en "Disponibles"
								respuesta=1; 
								break;   //termina la búsqueda
							}
						}
					}
				}
				return respuesta;
			}
			
			private function BuscaOriginalEnAsignados(id_res_out:int, localAsignados:ArrayCollection):int{
				var respuesta:int;//Esta variable puede contener uno de los siguientes valores
									// 0 Resgitro no localizado en "Asignados"
									// 2 Registro localizado en "Asignados"
				var longitud:int;
				
				//Inicialización de variables
				respuesta = 0;
				
				if (localAsignados != null ) {
					longitud = localAsignados.length;
					if (longitud > 0){
						for (var indice:int = 0; indice < longitud; indice++){

							//Busca la existencia del ID_RESULTADO en el arreglo de "asignados"
							if (id_res_out== int(localAsignados.getItemAt(indice).id_res_out)){
								// 1 Registro localizado en "Asignados"
								respuesta=2; 
								break;   //termina la búsqueda
							}
						}
					}
				}
				return respuesta;
			}
			
			//Esta función compara el arreglo de "resultadosAsignados"  
			//versus "OriginalesAsignados"
			//y si el elemento de "resultadosAsignados", no existe 
			//en el arrelo "original", entonces se guarda la nueva 
			//información en la tabla "c_campana_resultadosout"
			private function Busca_NuevosAsignados(resultadoOutbound:ResultadosOutbound):void{
				var respuesta:int;//Esta variable puede contener uno de los siguientes valores
				// 0 Resgitro no localizado en "originales"
				// 1 Registro localizado en "originales"
				var longitud:int;
				
				//inicialización de variables
				respuesta = 0;

				if (originalesAsignados != null ) {
					longitud = originalesAsignados.length;
					if (longitud > 0){
						//Inicialización de variables
						respuesta = 0;
						
						for (var indice:int = 0; indice < longitud; indice++){
							//Busca la existencia del ID_RESULTADO en el arreglo de "originales"
							if (int(resultadoOutbound.id_res_out) == int(originalesAsignados.getItemAt(indice).id_res_out)){
								// 1 Registro localizado en "originales"
								respuesta=1; 
								break;   //termina la búsqueda
							}
						}

						//Si existe un nuevo elemento, entonces se guarda la información 
						//en la tabla "c_campana_resultadosout" 
						if (respuesta == 0){
							//Guarda la información
							Guarda_Integracion(resultadoOutbound);
						}
					}
				}
			}

			private function Guarda_Integracion(resultadoOutbound:ResultadosOutbound):void{
				var longitud:int;
			
				if (chkTodas.selected == true){
					//Para todas las campañas, primero verifica la existencia del resultado,
					//en caso de que no exista (para la campaña en cuaestión),
					//entonces inserta el registro en BD.
					//Si ya existe el resultado, entonces sólo actualiza el estatus
					roGuardaTodasServicio.guardaIntegracion(int(resultadoOutbound.id_res_out), int(resultadoOutbound.estatus));
				}else
					//Guarda el nuevo registro
					roOutboundServicio.guardaIntegracion(int(resultadoOutbound.id_res_out), 
						int(resultadoOutbound.id_c_camp), 
						int(resultadoOutbound.estatus));
			}
			
			private function Elimina_Integracion(resultadoOutbound:ResultadosOutbound):void{
				var longitud:int;
				
				if (chkTodas.selected == true){
					//id_res_out_todasCampanias = resultadoOutbound.id_res_out;
					//roBuscaTodasServicio.regresaNumeroResultados(id_res_out_todasCampanias);
					
					roEliminaTodasServicio.eliminaIntegracion(resultadoOutbound.id_res_out);
				}else{
					//Elimina un registro
					roOutboundServicio.eliminaIntegracion(resultadoOutbound.id_res_out, resultadoOutbound.id_c_camp);
				}
			}
			
			private function Actualiza_Integracion(resultadoOutbound:ResultadosOutbound):void{
				var longitud:int;
				
				if (chkTodas.selected == true){
					//Actualiza el estatus para todas las campañas
					//que contengan el resultado en cuestión
					
					roActualizaTodasServicio.actualizaIntegracion(resultadoOutbound.id_res_out, resultadoOutbound.estatus);
				}else{
					//Se actualiza el estatus del resgitro para una sola campaña
					roOutboundServicio.actualizaIntegracion(resultadoOutbound.id_res_out, 
															resultadoOutbound.id_c_camp, 
															resultadoOutbound.estatus);
				}
			}
			
			private function Regresa_Estatus(id_res_out:int, localAsignados:ArrayCollection):int{
				var estatus:int;
				var indice:int;
				
				//inicialización de variables
				estatus = 0;
				
				if (localAsignados.length !=0){
					for (indice = 0; indice < localAsignados.length; indice++){
						if (id_res_out == int(localAsignados.getItemAt(indice).id_res_out)){
							estatus = int(localAsignados.getItemAt(indice).estaus);
							//Alert.show("Estatus = "+String(estatus),"Regresa_Estatus()  Id_resultado = "+String(id_res_out));
							break;
						}
					}
				}
				return estatus;
			}
			
			private function cbxCampania_changeHandler(event:IndexChangeEvent):void{
				//Alert.show("Dentro de cbxCampania_changeHandler(). "+String(cbxCampania.selectedIndex),"Información");
				if(valCambios==1){
					
					Alert.okLabel = "Aceptar";
					Alert.show("Se han realizado cambios en la campaña actual guarda o cancela los cambios.");
					//return;
					
				}else{
				
					if (cbxCampania.selectedIndex != -1){
						Llena_ResultadosCampania( int(cbxCampania.selectedItem.id_camp) );
					}
				}
				
			}

			private function Captura_Resultado():void{
				//Valida la existencia de duplicidad en el nombre
				Valida_NuevoNombre(String(txtResNuevo.text));
			}

			private function Valida_NuevoNombre(nombreResultado:String):void{
				var cadenaError:String;
				var longitud:int;
				var indice:int;
				var validarNombre:ValidationResultEvent =
					SV_nombre_resultado.validate();

				//Inicializacion de variables
			    bndNombreValido =0;      // No existe ningun error

				if (validarNombre.type != ValidationResultEvent.VALID) {
					bndNombreValido = 1;
					Alert.show("Favor de verificar el nombre del resultado","Error");
				}else{
					//El  nombre del resultado es válido
					bndNombreValido =0;

					//Bucar duplicidad
					if (bndNombreValido == 0) {
						//buscar el nombre del resultado en los DG de "disponibles"
						// y el DG "asignados"
						
						//Error el nombre ya existe en la lista de resultados disponibles
						//bndNombreValido = 3;
						bndNombreValido = BuscaNombre_DuplicadoDisponibles(nombreResultado);
						if (bndNombreValido != 0){
							cadenaError = Regresa_DescripError(bndNombreValido);
							Alert.show(cadenaError,"Error");
						}else{
							//Error el nombre ya existe en la lista de resultados asignados
							//bndNombreValido = 4;
							bndNombreValido = BuscaNombre_DuplicadoAsignados(nombreResultado);
							//Alert.show("BuscaNombre_DuplicadoAsignados() = "+String(bndNombreValido),"información");
							if ( bndNombreValido != 0){
								cadenaError = Regresa_DescripError(bndNombreValido);
								Alert.show(cadenaError,"Error");
							}else{
								////Valida que el nombre no exista en la BD
								roOutboundServicio.buscaPorNombre(nombreResultado);
							}
						}
					}	
				}
			}
			
			private function BuscaNombre_DuplicadoDisponibles(nombreResultado:String):int{
				var longitud:int;
				var indice:int;
				var bndNombre:int;
				
				//Inicializacion de variables
				bndNombre = 0;     //No existe duplicidad
				
				if (resultadosDisponibles != null){
					longitud = resultadosDisponibles.length;
					if (longitud >0 ){
						for(indice= 0; indice <= longitud-1; indice++){
							if (nombreResultado == String(resultadosDisponibles.getItemAt(indice).resultado)){
								bndNombre = 3;
								break;
							}
						}
					}
				}
				return bndNombre;
			}
				
			private function BuscaNombre_DuplicadoAsignados(nombreResultado:String):int{
				var longitud:int;
				var indice:int;
				var bndNombre:int;
					
				//Inicializacion de variables
				bndNombre = 0;     //No existe duplicidad
					
				if (resultadosAsignados != null){
					longitud = resultadosAsignados.length;
					if (longitud >0 ){
						for(indice= 0; indice <= longitud-1 ; indice++){
							if (nombreResultado == String(resultadosAsignados.getItemAt(indice).resultado)){								
								bndNombre = 4;
								break;
							}
						}
					}
				}
				return bndNombre;
			}
			
			private function resultHandler_buscaPorNombre(event:ResultEvent):void{
				//El nombre del resultado no existe en la BD
				if (int(event.result) ==  0){
					if ( bndNombreValido == 0) {
						//Almacena el registro en la BD
						roOutboundServicio.create(String(txtResNuevo.text));
					} 
				}else{
					Alert.show("El nombre del resultado ya existe en la base de datos","Error");
					txtResNuevo.text = "";
				}
			}

			private function Regresa_DescripError(bndValida:int):String{
				var cadenaError:String;
				//Inicialización de variables
				cadenaError = "";
				
				switch (bndValida){
					case 1:
						cadenaError = "Es necesario capturar el nombre del resultado";
						break;
					case 2:
						cadenaError = "El nombre del resultado ya existe";
						break;
					case 3:
						cadenaError = "El nombre ya existe en la lista de resultados disponibles";
						break;
					case 4:
						cadenaError = "El nombre ya existe en la lista de resultados asignados";
						break;
					case 5:
						cadenaError ="Es necesario elegir por lo menos una campaña"; 
						break;
				}
				return cadenaError
			}
			
			private function Llena_ResultadosCampania(id_camp:int):void{
				resultadosDisponibles = null;
				resultadosAsignados   = null;
				roOutboundServicio.findResultadosDisponibles(id_camp);
				roOutboundServicio.findResultadosAsignados(id_camp);
				roOutboundServicio.findOriginalesAsignados(id_camp);
			}
			
			private function Elimina_Resultado():void{
				  validaEliminaNuevoResultado(); 			
			}
			
			private function validaEliminaNuevoResultado():void{
				var bndValida:int;
				var cadenaError:String;
				var disponibleSeleccionado:int;
				var asignadoSeleccionado:int;

				//inicializacion de variables 
				bndValida = 0;     //no existe error
				disponibleSeleccionado =  dgDisponibles.selectedIndex;
				
				if (resultadosDisponibles.length == 0){
					//El datagrid está vacío
					bndValida = 1;
				}else{
					//Asegurar que un elemento haya sido seleccionado del dg Disponibles 
					if (disponibleSeleccionado != -1){ 
						if (int(dgDisponibles.selectedItem.id_res_out) == 0) {
							resultadosDisponibles.removeItemAt(disponibleSeleccionado);
							if (resultadosDisponibles.length == 0)
								DeshabilitaBotones_ResDisponibles();
							else
								HabilitaBotones_ResDisponibles();
						}else{
							
							//Confirmar la decisión del usuario
							Alert.show("¿Está seguro de eliminar el resultado disponible? ","Información",Alert.OK| Alert.NO,this,Confirma_EliminacionDisponible,null,Alert.OK);
						}
					}else{
						//Es necesario elegir un resultado disponible
						bndValida = 2;
					}
				}
				if (bndValida != 0){
					cadenaError = regresaCadenaErrorElimina(bndValida);
					Alert.show(cadenaError,"Error");
				}
			}

			private function regresaCadenaErrorElimina(bndValida:int):String{
				var cadenaError:String;
				
				//Inicializacion de variables
				cadenaError = "";
				switch(bndValida){
					case 1:
						cadenaError = "No existen resultados disponibles"
						break;
					case 2:
						cadenaError = "Es necesario elegir un resultado disponible"
						break;
				}
				return cadenaError;
			}
			
			private function Confirma_EliminacionDisponible(eventObj:CloseEvent):void{
				if (eventObj.detail == Alert.OK  &&  dgDisponibles.selectedIndex != -1){
					//Se elimina el registro del datagrid  "Resultados disponibles"
					roOutboundServicio.eliminaDisponible(int(resultadosDisponibles.getItemAt(dgDisponibles.selectedIndex).id_res_out));
				}
			}

			private function faultHandler(event:FaultEvent):void{
				Alert.show(event.fault.faultString,"Error");
			}
			
			private function result_buscaCampanasPorTipo(event:ResultEvent):void{
				if (event.result != null ){
					datosCampanias = ArrayCollection(event.result);
				}else{
					Alert.show("No existen campañas outbound","Atención");
					Prepara_Form();
					btnEditar.enabled = false;
				}	
			}
			
			private function resultHandlerFindAllCamp(event:ResultEvent):void{
				resultadosDisponibles = ArrayCollection(event.result);
				originalesDisponibles = ArrayCollection(event.result);
				dgDisponibles.dataProvider = resultadosDisponibles;
			}
			
			private function resultHandler_create(event:ResultEvent):void{
				//if (event.result != null){	
				//}else{
				    roOutboundServicio.regresaMaxDisponible();
				//}
			}
			
			private function resultHandler_findResultadosDisponibles(event:ResultEvent):void{
				// TODO Auto-generated method stub
				
				resultadosDisponibles = ArrayCollection(event.result);
				originalesDisponibles = ArrayCollection(event.result);
				dgDisponibles.dataProvider = resultadosDisponibles;	
				if (resultadosDisponibles.length == 0)
					DeshabilitaBotones_ResDisponibles();
				else{
					btnEliminarResultado.enabled = true;
				}
			}
			
			private function resultHandler_findResultadosAsignados(event:ResultEvent):void{
				//TODO 
				resultadosAsignados = ArrayCollection(event.result);
				//originalesAsignados = ArrayCollection(event.result);
				dgCampania.dataProvider = resultadosAsignados;
				if (resultadosAsignados.length == 0){
					DeshabilitaBotones_ResAsignados();
					btnGuardar.enabled = false;
				}else{
					HabilitaBotones_ResAsignados();
					if (resultadosDisponibles != null && resultadosDisponibles.length != 0)
						HabilitaBotones_Enviar();
					if (btnGuardar.enabled == false)
						btnGuardar.enabled = true;
				}
				
			}
			
			private function resultHandler_guardarIntegracion(event:ResultEvent):void{
				//if (int(event.result) != 1 ){
				//	Alert.show("No fue posible guradar el registro","Error");
				//	bndError = 1;
				//}
				//else{
				//	Alert.show("Registro guardado de forma exitosa","Información");					
				//}
			}
			
			private function resultHandler_actualizarIntegracion(event:ResultEvent):void{
				if (int(event.result) == 0 ){
					//Alert.show("No fue posible actualizar el resultado asignado","Error");
					
					//Existió un error al intentar actualizar los datos
					bndError = 1;
				}   
				//else//{
				//	Alert.show("Registro actualizado de forma exitosa","Información");					
				//}
			}
			
			private function resultHandler_eliminarIntegracion(event:ResultEvent):void{
				if (int(event.result) == 0 ){
					//Alert.show("No fue posible eliminar el resultado asignado","Error");
					
					//Existió un error al intentar eliminar los datos
					bndError = 1;
				}
				//else{
				//	Alert.show("Registro eliminado de forma exitosa","Información");
				//}
			}

			private function HabilitaBotones_ResDisponibles():void{
				btnEliminarResultado.enabled = true;
				btnAdd.enabled = true;
				btnAddAll.enabled = true;
			}
			
			private function DeshabilitaBotones_ResDisponibles():void{
				btnEliminarResultado.enabled = false;
				btnAdd.enabled = false;
				btnAddAll.enabled = false;
			}
			
			private function HabilitaBotones_ResAsignados():void{
				btnRemove.enabled = true;
				btnRemoveAll.enabled = true;
			}
			
			private function DeshabilitaBotones_ResAsignados():void{
				btnRemove.enabled = false;
				btnRemoveAll.enabled = false;
			}
			
			private function HabilitaBotones_Enviar():void{
				btnAdd.enabled = true;
				btnAddAll.enabled = true;
			}
			
			private function DeshabilitaBotones_Enviar():void{
				btnAdd.enabled = false;
				btnAddAll.enabled = false;
			}
			
			private function resultHandler_guardarDisponible(event:ResultEvent):void{
				if (int(event.result) != 0){
					Alert.show("No fue posible agregar el registro","Error");
				}else{
					//Agregar al DG de disponibles
					resultadosDisponibles.addItem(resultadoOutTmp);
					HabilitaBotones_ResDisponibles();
					txtResNuevo.text = null;
				}
			}		
			
			private function resultHandler_regresaMaxDisponible(event:ResultEvent):void{
				var maxId:int;
				if (event.result != null){
					//Inicializacion de variables
					resultadoOutTmp  = new ResultadosOutbound();
					
					//Se asiga el valor maximo del id
					//resultante de la tabla "c_resultados_outbo"
					maxId = int(event.result);

					resultadoOutTmp.id_res_out = maxId;
					resultadoOutTmp.id_c_camp  = 0;
					resultadoOutTmp.resultado  = String(txtResNuevo.text);
					resultadoOutTmp.descripcion = null;
					resultadoOutTmp.estatus = 1;

					//Agregar al DG  "Disponibles"
					resultadosDisponibles.addItem(resultadoOutTmp);
					dgDisponibles.dataProvider = resultadosDisponibles;

					txtResNuevo.text = null;
					if (btnEliminarResultado.enabled == false)
						btnEliminarResultado.enabled = true;
				}
			}
			
			private function resultHandler_findById(event:ResultEvent):void{
				if (event.result != null){

					resultadoOutTmp = ResultadosOutbound(event.result);
					
					//Agregar al DG de disponibles
					resultadosDisponibles.addItem(resultadoOutTmp);

					txtResNuevo.text = null;
					if (btnEliminarResultado.enabled == false)
						HabilitaBotones_ResDisponibles();
				}
			}
			private function resultHandler_eliminaDisponible(event:ResultEvent):void{
				if (int(event.result) != 1){
					Alert.show("No fue posible eliminar el resultado","Error");
				}else{
					//Eliminar un registro del datagrid de Resultados Disponibles
					resultadosDisponibles.removeItemAt(dgDisponibles.selectedIndex);
					//inicialización de variables
					bndEliminaResultadoDisponible = 0;
					if (resultadosDisponibles.length == 0)
						DeshabilitaBotones_ResDisponibles();
					Alert.show("El resultado fue eliminado de forma exitosa","Información");
				}
			}

			private function resultHandler_findOriginalesAsignados(event:ResultEvent):void{
				originalesAsignados = ArrayCollection(event.result);
			}

			public function cambioEstatus(estatusNuevo:int):void{
				var indice:int;
				
				//Inicialización de variables
				indice = dgCampania.selectedIndex;
				
				//Actualiza el estatus
				if (indice != -1)
					resultadosAsignados.getItemAt(indice).estatus = estatusNuevo;
			}
			
			private function Cerrar_Ventana():void{
				Alert.okLabel = "Si";
				Alert.noLabel = "No";
				
				if ( bndNumeroCambios != 0 ){
					Alert.show("¿Desea guardar los cambios?", "Cerrar", Alert.OK |Alert.NO,this,Confirma_CerrarVentana,null,Alert.OK);
					
				}else{
					//Se guardaron todos los cambios antes de cerrar la ventana
					this.finPopUp();
				}
			}
			
			private function Confirma_CerrarVentana(eventObj:CloseEvent):void{
				if (eventObj.detail == Alert.NO ){
					this.finPopUp();
				}else{
					//cerrar la ventana
					bndCerrarVentana = 1;					
					//Alert.show("Existen cambios que no han sido guardados","Información");
					Update(eventObj);
				}
			}

			protected function chkTodas_changeHandler(event:Event):void{
				// Verid¿fica si no hay cambios que guardar
				if(valCambios==1){			
					Alert.okLabel = "Aceptar";
					Alert.show("Se han realizado cambios en la campaña actual guarda o cancela los cambios.");
					chkTodas.selected = false; 				
				}else{			
					if (chkTodas.selected == true) {
						
						//Inhabilitar el combobox
						cbxCampania.enabled  = false;
						
						//Invocar el servicio que regresa todos los resultados que no han sido asignados a ninguna campaña
						roOutboundServicio.findResultadosDisponibles();
						//Invocar el servicio que regresa todos los resultados asignados a por lo menos una campaña 
						roOutboundServicio.findResultadosAsignados();
						roOutboundServicio.findOriginalesAsignados();
					}else{
						Alert.show("else");
						//Habilitar el combobox
						cbxCampania.enabled  = true;
						
						//Limpiar el datagrid de "Resultados Disponibles"
						if (resultadosDisponibles != null || resultadosDisponibles.length != 0 ) {
							resultadosDisponibles.removeAll();
							resultadosDisponibles = new ArrayCollection();
							dgDisponibles.dataProvider = resultadosDisponibles;
							DeshabilitaBotones_ResDisponibles();
						}
						//Limpiar el datagrid de "Resultados Asignados"
						if (resultadosAsignados != null || resultadosAsignados.length != 0){
							resultadosAsignados.removeAll();
							resultadosAsignados = new ArrayCollection();
							dgCampania.dataProvider = resultadosAsignados;
							DeshabilitaBotones_ResAsignados();
							btnGuardar.enabled = false;
						}
						//Si existe algun valor seleccionado del combobox,
						//Entonces se muestran los resultadois outbound correspondientes
						if (cbxCampania.selectedIndex != -1){
							roOutboundServicio.findResultadosDisponibles(int(cbxCampania.selectedItem.id_camp));
							roOutboundServicio.findResultadosAsignados(int(cbxCampania.selectedItem.id_camp));
						}
					}
					
					//Inicializar las bandera que cuenta el número de cambios realizados
					bndNumeroCambios = 0;
				}
			}
			
			private function resultHandler_consultaPorIdTodas(event:ResultEvent):void{
				var numResultados:int;
				if (event.result != null){
					numResultados = int(event.result);
					
					//Alert.show("Existen "+numResultados.toString()+" registros","Info");
					if (numResultados != 0){
						//Elimina el resultado para todas las campañas que lo contengan
						roEliminaTodasServicio.eliminaIntegracion(id_res_out_todasCampanias);
					}
				}
			}
			
			private function resultHandler_actaulizaTodasCampanias(event:ResultEvent):void{
				if (int(event.result) == 0){
					//Alert.show("No fue posible actualizar los resultados asignados para todas las campañas","Error");

					//Existió un error al intentar actualizar los datos
					bndError = 1;
				}else{
					//El registros de la tabla "c_campana_resultadosout" fueron actualizados de forma exitosa	
					//Los Resultados Asignados fueron actualizados de forma exitosa
					//Alert.show(String(int(event.result))+" registros actualizados","resultHandler_actaulizaTodasCampanias");
				}
			}
			
			private function resultHandler_eliminaTodasCampanias(event:ResultEvent):void{
				var resultado:int;
				if (event.result != null){
					resultado = int(event.result);

					if (resultado == 0){
						//Alert.show("No fue posible eliminar el resultado asignado para todas las campañas","Error");
						
						//Existió un error al intentar eliminar los datos
						bndError = 1;
					}else{
						//Los registros  fueron eliminados de la tabla "c_campana_resultadosout" de forma exitosa
						
						//Los Resultados Asignados fue eliminados de forma exitosa
						//Alert.show(String(resultado) +" registros eliminados","resultHandler_eliminaTodasCampanias");
					}
				}
			}
			
			private function resultHandler_guardaTodasCampanias(event:ResultEvent):void{
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>		
		<s:RemoteObject id="roCampaniaServicio" destination="CampanaService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="buscaCampanasPorTipo" result="result_buscaCampanasPorTipo(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="roOutboundServicio" destination="ResultadosOutboundService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="findAll" result="resultHandlerFindAllCamp(event)" fault="faultHandler(event)" />
			<s:method name="create" result="resultHandler_create(event)" fault="faultHandler(event)" />
			<s:method name="regresaMaxDisponible" result="resultHandler_regresaMaxDisponible(event)" fault="faultHandler(event)" />
			<s:method name="findById" result="resultHandler_findById(event)" fault="faultHandler(event)" />
			<s:method name="findResultadosDisponibles" result="resultHandler_findResultadosDisponibles(event)" fault="faultHandler(event)"/>
			<s:method name="findResultadosAsignados" result="resultHandler_findResultadosAsignados(event)" fault="faultHandler(event)"/>
			<s:method name="findOriginalesAsignados" result="resultHandler_findOriginalesAsignados(event)" fault="faultHandler(event)"/>
			<s:method name="guardaDisponible" result="resultHandler_guardarDisponible(event)" fault="faultHandler(event)" />
			<s:method name="eliminaDisponible" result="resultHandler_eliminaDisponible(event)" fault="faultHandler(event)" />
			<s:method name="guardaIntegracion" result="resultHandler_guardarIntegracion(event)" fault="faultHandler(event)" />
			<s:method name="actualizaIntegracion" result="resultHandler_actualizarIntegracion(event)" fault="faultHandler(event)" />
			<s:method name="eliminaIntegracion" result="resultHandler_eliminarIntegracion(event)" fault="faultHandler(event)" />
			<s:method name="buscaPorNombre" result="resultHandler_buscaPorNombre(event)" fault="faultHandler(event)"/>
		</s:RemoteObject>

		<s:RemoteObject id="roBuscaTodasServicio" destination="ResultadosOutboundService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="regresaNumeroResultados" result="resultHandler_consultaPorIdTodas(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="roActualizaTodasServicio" destination="ResultadosOutboundService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="actualizaIntegracion" result="resultHandler_actaulizaTodasCampanias(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="roEliminaTodasServicio" destination="ResultadosOutboundService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="eliminaIntegracion" result="resultHandler_eliminaTodasCampanias(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="roGuardaTodasServicio" destination="ResultadosOutboundService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="guardaIntegracion" result="resultHandler_guardaTodasCampanias(event)" fault="faultHandler(event)" />
		</s:RemoteObject>

		<mx:StringValidator id="SV_nombre_resultado" source="{txtResNuevo}" property="text" required="true"  minLength="2" 
							requiredFieldError="Es necesario capturar el nombre del resultado" />
		
	</fx:Declarations>
	<s:DataGrid id="dgDisponibles"     x="71" y="87" width="183" height="210"  > <!-- focusIn= "Hide_Experiencia() dataProvider="{resultadosDisponibles}"  rowCount="numDisponibles"   -->   
		<s:columns>
			<s:ArrayList>
				<s:GridColumn  dataField="id_res_out" headerText=""  visible="false"> </s:GridColumn>        <!--   resizable="false" sortable="false" -->
				<s:GridColumn visible="false" dataField="id_c_camp" headerText=""> </s:GridColumn>
				<s:GridColumn dataField="resultado" headerText="Resultados Disponibles"> </s:GridColumn>
				<s:GridColumn visible="false" dataField="descripcion" headerText=""> </s:GridColumn>
				<s:GridColumn visible="false" dataField="estatus" headerText=""> </s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>

	<s:DataGrid id="dgCampania"     x="330" y="87" width="301" height="210" >  <!-- itemClick = "Display_Experiencia()"    -->
		<s:columns>
			<s:ArrayList>	
				<s:GridColumn visible="false" dataField="id_res_out" headerText="" resizable="false"
								   sortable="false"> </s:GridColumn>
				<s:GridColumn visible="false" dataField="id_c_camp" headerText="" resizable="false"
								   sortable="false"> </s:GridColumn>
				<s:GridColumn  dataField="resultado" headerText="Resultado"
								   resizable="false" sortable="false"></s:GridColumn>
				<s:GridColumn visible="false" dataField="descripcion" headerText=""
								   resizable="false" sortable="false"> </s:GridColumn>
				<s:GridColumn width="71" dataField="estatus" headerText="Estado"  
								   editable="true"   sortable="false"  resizable="false" >   <!-- editorDataField="change"  rendererIsEditor="true"   
																							<mx:Box width="100%" height="100%" 	horizontalAlign="center" verticalAlign="middle"></mx:Box>   -->
					<s:itemRenderer>  
						<fx:Component>
							<s:GridItemRenderer>
								
								<fx:Script>
									<![CDATA[
										import formas.CatalogoResultadosOutbound;
										
										import mx.controls.Alert;
										import mx.core.FlexGlobals;
										
										import objectosJava.ResultadosOutbound;
										
										private var _myData:Object;

										protected function chkEstatus_changeHandler(event:Event):void{
											//Informa acerca  del nuevo estatus, para que se actualice 
											//el DataGrid de "Resultados Asignados" 
											outerDocument.cambioEstatus(int(chkEstatus.selected));
										}
									]]>
								</fx:Script>
							
								<mx:CheckBox id="chkEstatus" textAlign="center" horizontalCenter="3" selected="{data.estatus}" change="chkEstatus_changeHandler(event)" >	
								</mx:CheckBox>  <!-- change="onCambioEstatus(event)"     -->
							</s:GridItemRenderer>
						</fx:Component>
						
					</s:itemRenderer>
					
				</s:GridColumn>
			</s:ArrayList>	
		</s:columns>
		
	</s:DataGrid>
	
	<s:VGroup x="263" y="121" width="59" height="138">
		<s:Button id="btnAdd" width="59" label="--&gt;" click="AddItem()"/>
		<s:Button id="btnRemove" width="59" label="&lt;--" click="RemoveItem()"/>
		<s:Button id="btnAddAll" width="59" label="&gt;&gt;" click="AddAllItems()"/>
		<s:Button id="btnRemoveAll" width="59" label="&lt;&lt;" click="RemoveAllItems()"/>
	</s:VGroup>

	<s:Button id="btnEditar" x="676" y="122" width="74" label="Editar" click="Activa_Edicion()" />   
	<s:Button id="btnGuardar" x="676" y="153" width="74" label="Guardar" click="Guarda_Resultados()" /> <!--  -->
	<s:Button id="btnCancelar" x="676" y="185" width="74" label="Cancelar" click="Cancela_Edicion()"/>          <!--    -->
	<s:Button id="btnSalir" x="676" y="314" width="74" label="Cerrar" click="Cerrar_Ventana()"/>
	<s:Button id="btnEliminarResultado" x="192" y="314" label="Eliminar"  click="Elimina_Resultado()"/>	
	<s:Label x="21" y="31" text="Resultado:"/>
	<s:Label x="360" y="31" text="Campaña:"/>
	 
	<s:TextInput id="txtResNuevo" x="88" y="21" width="166" enabled="true" /> <!--    restrict="a-z" -->
	<s:Button id="btnAgregarResultado" x="188" y="55" label="Agregar"  click="Captura_Resultado()"/>
	<s:ComboBox id="cbxCampania" x="429" y="21"  dataProvider="{datosCampanias}" labelField="nombre_camp" change="cbxCampania_changeHandler(event)" /> <!-- change="id_tipo_usr_changeHandler(event)" -->
	<s:CheckBox id="chkTodas" x="570" y="57" label="Todas"  change="chkTodas_changeHandler(event)" />
	
</mx:Canvas>
