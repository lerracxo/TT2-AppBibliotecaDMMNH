<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   label="{nombreCatalogo}" creationComplete="cargaDatos()"
		   width.alta_modificacion="888" height.alta_modificacion="412"
		   width.grid="95%" height.grid="95%" locale="en_ES">

	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.SHA1;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			import mx.managers.PopUpManager;
			
			import objetosJava.PosicionAgente;
			import objetosJava.TipoUsuario;
			import objetosJava.Usuario;
			
			import spark.events.DropDownEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable] public var chanel:String;
			[Bindable] public var message:String;
			[Bindable] public var usuariologeado:Usuario;
			[Bindable] public var usuario:Usuario = new Usuario();
			[Bindable] public var tipoUsuario:TipoUsuario;
			[Bindable] public var posicionAgente:PosicionAgente;
			[Bindable] public var datosGrid:ArrayCollection;
			[Bindable] public var datosTipoUsuario:ArrayCollection;
			[Bindable] public var datosPosicion:ArrayCollection;
			[Bindable] public var endpoint:String;
			[Bindable] public var nombreCatalogo:String;
			[Bindable] private var validatorArr:Array;
			[Bindable] public var bloqueo:int;
			[Bindable] public var VentanaBusqueda:Buscar_Usuario;
			[Bindable] public var datosSupervisor:ArrayCollection = new ArrayCollection(
				[{nombre_tipo:"Agente", id_tipo_usr:2}]);
			
			/*
			 * Obtiene a todos los usuarios en el sistema.
			 */
			private function cargaDatos():void
			{
					roUsuarios.findAll();	
			}
			
			private function cargaValidaciones(tipo_usr:int,recepcion:int):void
			{
				if(tipo_usr==2){ // Tipo de usuario
				validatorArr = new Array();
				validatorArr.push(SV_nombre_usr);
				validatorArr.push(SV_apellido_paterno_usr);
				validatorArr.push(EV_email_usr);
				validatorArr.push(SV_estatus_usuario);
				validatorArr.push(NV_id_tipo_usr);
				}else{
					validatorArr = new Array();
					validatorArr.push(SV_nombre_usr);
					validatorArr.push(SV_apellido_paterno_usr);
					validatorArr.push(EV_email_usr);
					validatorArr.push(SV_estatus_usuario);
					validatorArr.push(NV_id_tipo_usr);
				}
				
			}
			
			private function myEventHandler(event:MouseEvent):void {
				if(event.target.id == "btnmodificar"){
					usuario = this.VentanaBusqueda.usuario;
					if (this.VentanaBusqueda.modificar_ok == 1){
						currentState="alta_modificacion";
						preparaModicicacion(usuario);
					}
				}
				if(event.target.id == "btnsalir"){
					//if(usuariologeado.id_tipo_usr == 3)
						roUsuarios.findAll();
					//else 
						//roUsuarios.Find_UsuariosSupervisor(usuariologeado.id_usr);				
				}
			}
			
			private function resultHandlerFindAll(event:ResultEvent):void
			{
				datosGrid = ArrayCollection(event.result);
				dg.dataProvider = datosGrid;

			}
			
			private function resultHandlerTipoUsuarioFindAll(event:ResultEvent):void
			{
				datosTipoUsuario = ArrayCollection(event.result)
				
				//Condicion para que el supervisor solo de de alta Agentes
				
				if(usuariologeado.id_tipo_usr == 1){
					this.id_tipo_usr.dataProvider = datosSupervisor;
					id_tipo_usr.selectedIndex = 0;
				}
				else{
					this.id_tipo_usr.dataProvider = datosTipoUsuario;
					id_tipo_usr.selectedIndex = usuario.id_tipo_usr-1;
				}
				QuitarTipoUsuario();
			}
			
			private function QuitarTipoUsuario():void
			{
				//Se quita el último elemnto correspondiente al "Configurador", de acuerdo al Caso de Uso.
				datosTipoUsuario.removeItemAt(datosTipoUsuario.length - 1);
			}
			
			private function result_validaBloqueo(event:ResultEvent):void
			{
				bloqueo = int(event.result);
				if(bloqueo == 5){
					this.fibloqueado.visible =  true;
					this.check_bloqueo.selected = true;
				}else 
					this.fibloqueado.visible = false;
			}
			
			private function result_DesbloqueaUsuario(event:ResultEvent):void
			{
				var ok:int = int(event.result);
				if(ok != 0)
					Alert.show("El Usuario fue desbloqueado");
			}
			
			private function resultHandlerPosicionAgenteFindAll(event:ResultEvent):void
			{
				datosPosicion = ArrayCollection(event.result)
				//id_posicion.selectedIndex = usuario.id_posicion-1;
			}
			
			private function resultHandlerNuevoUsuario(event:ResultEvent):void
			{
				usuario = event.result as Usuario
				Alert.show('El usuario '+usuario.usr+' se creó exitosamente' ,"Información")
				roUsuarios.findAll();
				currentState='grid';
				
			}
			
			private function resultHandlerActualizaUsuario(event:ResultEvent):void
			{
				var ok:int = event.result as int
				if(ok == 1){
					Alert.show('El usuario '+usuario.usr+' se actualizó exitosamente' ,"Información")
					roUsuarios.findAll();
					currentState='grid';
				}else{
					Alert.show('El usuario '+usuario.usr+' no se actualizó ' ,"Información")
				}
			}
			
			private function resultHandlerEliminaUsuario(event:ResultEvent):void
			{
				var ok:int = event.result as int
				if(ok == 1){
					Alert.show('El usuario '+usuario.usr+' se eliminó exitosamente' ,"Información")
					roUsuarios.findAll();
					currentState='grid';
				}else{
					Alert.show('El usuario '+usuario.usr+' no se eliminó ' ,"Información")
				}
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString,"Error");
			}
			
			private function save():void
			{ 
			try{
			
				if(id_tipo_usr.selectedItem != null)
				{
					
				/* Se comenta por nuevo desarrollo
				//Alert.show(id_tipo_usr.selectedItem.id_tipo_usr+' '+recepcion_fuera_cc.selected.toString(),'Variables de carga de validación')
				validatorArr = new Array();
				cargaValidaciones(id_tipo_usr.selectedItem.id_tipo_usr,int(recepcion_fuera_cc.selected));
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				Alert.show(isValidForm.toString()+' '+id_usr.text,'Variables de validación')
				if (isValidForm){
					if(id_usr.text == '0' ){
						create();
					}else{
						update();
						
					}
				   }else {
					 Alert.show("Favor de capturar los datos requeridos * ", 'Información',Alert.OK);
					
				   }
			   }else{
				   //cargaValidaciones(0,0);
				   //var validatorErrorArray:Array = Validator.validateAll(validatorArr);
				   Alert.show("Favor de capturar los datos requeridos", 'Información',Alert.OK);  
				*/
			   }
				   
			}catch(errObject:Error){
				//Alert.show("Favor de capturar los datos requeridos * ", 'Información',Alert.OK);
				Alert.show(errObject.message +' '+ errObject.name,"Error Validador")
			}
			}
			
			
			private function create():void{
				try{				
					if(id_tipo_usr.selectedItem.id_tipo_usr==2){
					usuario.id_usr = 0;
					usuario.id_tipo_usr =  int(id_tipo_usr.selectedItem.id_tipo_usr);
					//usuario.id_posicion = int(id_posicion.selectedItem.id_posicion);
					usuario.usr = usr.text;
					usuario.password = '';
					usuario.nombre_usr = nombre_usr.text;
					usuario.apellido_paterno_usr = apellido_paterno_usr.text;
					usuario.apellido_materno_usr = apellido_materno_usr.text;
					usuario.email_usr = email_usr.text;
					//usuario.callblending = int(callblending.selected);
					//usuario.extension = int(extension.text);
					//usuario.recepcion_fuera_cc = int(recepcion_fuera_cc.selected);
					//usuario.grabacion_demanda = int(grabacion_demanda.selected);
					//usuario.extension_fuera_cc = int(extension_fuera_cc.text);
					usuario.estatus_usr = int(estatus_usr.selected);
					roUsuarios.create(usuario);
					}else{
						usuario.id_usr = 0;
						usuario.id_tipo_usr =  int(id_tipo_usr.selectedItem.id_tipo_usr);
						//usuario.id_posicion = 0;
						usuario.usr = usr.text;
						usuario.password = '';
						usuario.nombre_usr = nombre_usr.text;
						usuario.apellido_paterno_usr = apellido_paterno_usr.text;
						usuario.apellido_materno_usr = apellido_materno_usr.text;
						usuario.email_usr = email_usr.text;
						//usuario.callblending = 0;
						//usuario.extension = 0;
						//usuario.recepcion_fuera_cc = 0;
						//usuario.grabacion_demanda = 0;
						//usuario.extension_fuera_cc =0;
						usuario.estatus_usr = int(estatus_usr.selected);
						//Alert.show(String(usuario.estatus_usr) + estatus_usr.selected.toString(),'info')
						roUsuarios.create(usuario);
				}
				}catch(erObject:Error){
					Alert.show(erObject.message + erObject.name,"Error")
				}
			}
			
			private function update():void{
				try{				
					if(id_tipo_usr.selectedItem.id_tipo_usr==2){
					usuario.id_tipo_usr =  int(id_tipo_usr.selectedItem.id_tipo_usr);
					//usuario.id_posicion = int(id_posicion.selectedItem.id_posicion);
					usuario.nombre_usr = nombre_usr.text;
					usuario.apellido_paterno_usr = apellido_paterno_usr.text;
					usuario.apellido_materno_usr = apellido_materno_usr.text;
					usuario.email_usr = email_usr.text;
					//usuario.callblending = int(callblending.selected);
					//usuario.extension = int(extension.text);
					//usuario.recepcion_fuera_cc = int(recepcion_fuera_cc.selected);
					//usuario.grabacion_demanda = int(grabacion_demanda.selected);
					//usuario.extension_fuera_cc = int(extension_fuera_cc.text);
					usuario.estatus_usr = int(estatus_usr.selected);
					roUsuarios.update(usuario);
					}else{
						usuario.id_tipo_usr =  int(id_tipo_usr.selectedItem.id_tipo_usr);
						//usuario.id_posicion = 0;
						usuario.usr = usr.text;
						usuario.nombre_usr = nombre_usr.text;
						usuario.apellido_paterno_usr = apellido_paterno_usr.text;
						usuario.apellido_materno_usr = apellido_materno_usr.text;
						usuario.email_usr = email_usr.text;
						//usuario.callblending = 0;
						//usuario.extension = 0;
						//usuario.recepcion_fuera_cc = 0;
						//usuario.grabacion_demanda = 0;
						//usuario.extension_fuera_cc =0;
						usuario.estatus_usr = int(estatus_usr.selected);
						roUsuarios.update(usuario);
					}
					
					if(this.fibloqueado.visible == true && this.check_bloqueo.selected == false)
						roLogin.Desbloquea_Usuario(usuario.id_usr);
				}catch(erObject:Error){
					Alert.show(erObject.message + erObject.name,"Error")
				}
			}
			
			
			/*
			 * Activa el estado de vista para crear un nuevo usuario 
			*/
			private function nuevo():void
			{
				currentState="alta_modificacion";
				usuario = new Usuario()
				preparaFormaUsuario(usuario)

			}
			
			private function modificar():void
			{
				if(dg.selectedItem != null){
					usuario = dg.selectedItem as Usuario;
					if(usuariologeado.id_tipo_usr == 1 && usuario.id_tipo_usr != 2)
						Alert.show("Este registro no puede ser modificado por un Supervisor","Información");
					else{
						currentState="alta_modificacion";
						preparaModicicacion(usuario)
					}
						
				}else{
					Alert.show("Favor de seleccionar un registro","Información");
				}
				
			}
			
			private function eliminar():void
			{
				if(dg.selectedItem != null){
					usuario = dg.selectedItem as Usuario;
					if(usuariologeado.id_tipo_usr == 1 && usuario.id_tipo_usr != 2)
						Alert.show("Este registro no puede ser eliminado por un Supervisor","Información");
					else
						Alert.show("¿Está seguro de inactivar al usuario? ","Información",Alert.OK| Alert.NO,this,remove,null,Alert.OK);	
				}else{
					Alert.show("Favor de seleccionar un registro","Información");
				}
			}
			
			
			private function remove(eventObj:CloseEvent):void
			{
				
				if(eventObj.detail==Alert.OK){
				usuario = dg.selectedItem as Usuario;
				roUsuarios.remove(usuario);
				}
			}
			
			private function Buscar():void
			{
				VentanaBusqueda = Buscar_Usuario(PopUpManager.createPopUp(this, Buscar_Usuario, false));
				VentanaBusqueda.endpoint = endpoint;
				VentanaBusqueda.usuariologeado = usuariologeado;
				VentanaBusqueda.setStyle("borderAlpha", 0.9);
				VentanaBusqueda.closeButton.visible = false;	
				PopUpManager.centerPopUp(VentanaBusqueda);
				PopUpManager.bringToFront(VentanaBusqueda);
				VentanaBusqueda.addEventListener(MouseEvent.CLICK,myEventHandler);
				
			}
			
			private function preparaFormaUsuario(uso:Usuario):void
			{
				roTipoUsuarios.findAll(); // Obtiene los tipos de usuario
				
				// roPosicionAgente.findAll(); // Queda en desuso
				id_tipo_usr.selectedIndex = -1; // tipo de usuario en nulo
				
				// Inicialización de las variables del usuario
				nombre_usr.text = ''; 		
				apellido_paterno_usr.text ='';
				apellido_materno_usr.text = '';
				email_usr.text ='';
				estatus_usr.selected = false;
				// Validadores
				nombre_usr.errorString=''
				apellido_paterno_usr.errorString=''
				email_usr.errorString=''
				id_tipo_usr.errorString='';
				
				// Variables que caen en desuso
				/*
				callblending.selected = false; 
				extension.text = '';
				recepcion_fuera_cc.selected = false;
				grabacion_demanda.selected = false;
				extension_fuera_cc.text = '';
				// Validadores en desuso
				extension_fuera_cc.errorString='';
				extension.errorString='';
				*/


				
				/*
				this.id_tipo_usr.textInput.editable = false;
				this.finombre_usr.errorString = "";
				this.fiapellido_paterno_usr.errorString = "";
				this.fiemail_usr.errorString = "";
				this.fiextension.errorString = "";
				this.fiid_posicion.errorString = "";
				this.fiid_tipo_usr.errorString =  "";
				fiid_posicion.visible=false
				fiextension.visible=false
				ficallblending.visible=false
				figrabacion_demanda.visible=false
				fiextension_fuera_cc.visible=false
				fiextension_fuera_cc.required=false
				fiid_posicion.required=false
				fhDCall.visible=false;
				*/
				
				// Para este caso todos van ser visibles, porque todos los usuarios son iguales, exceptuando por le rol
				/*
				if(usuariologeado.id_tipo_usr == 1){
					cargaValidaciones(2,0);
					fiid_posicion.visible=true
					fiid_posicion.required=true
					fiextension.visible=true
					ficallblending.visible=true
					figrabacion_demanda.visible=true
					fiextension_fuera_cc.visible=true
					fhDCall.visible=true
					id_posicion.errorString='';
					extension.errorString='';
					extension_fuera_cc.errorString='';
				}
				*/
					
			}
			
			private function preparaModicicacion(usuario:Usuario):void
			{
				roTipoUsuarios.findAll();
				nombre_usr.text = usuario.nombre_usr;
				apellido_paterno_usr.text = usuario.apellido_paterno_usr;
				apellido_materno_usr.text = usuario.apellido_materno_usr;
				email_usr.text = usuario.email_usr;
				estatus_usr.selected = Boolean(usuario.estatus_usr);

				this.id_tipo_usr.enabled = false;
				this.finombre_usr.errorString = "";
				this.fiapellido_paterno_usr.errorString = "";
				this.fiemail_usr.errorString = "";

				this.fiid_tipo_usr.errorString =  "";
			
			}			
			private function cerrar():void
			{
				currentState="grid";
				//preparaFormaUsuario();
			}
			
			

			
			protected function id_tipo_usr_changeHandler(event:IndexChangeEvent):void
			{
				/*
				// documentar
				if(id_tipo_usr.selectedItem.id_tipo_usr==2){
					cargaValidaciones(id_tipo_usr.selectedItem.id_tipo_usr,0);
					fiid_posicion.visible=true
					fiid_posicion.required=true
					fiextension.visible=true
					ficallblending.visible=true
					figrabacion_demanda.visible=true
					fiextension_fuera_cc.visible=true
					fhDCall.visible=true
					id_posicion.errorString='';
					extension.errorString='';
					extension_fuera_cc.errorString='';
					}else{
						cargaValidaciones(id_tipo_usr.selectedItem.id_tipo_usr,0);
						fiid_posicion.visible=false
						fiextension.visible=false
						ficallblending.visible=false
						figrabacion_demanda.visible=false
						fiextension_fuera_cc.visible=false
						fhDCall.visible=false
						id_posicion.selectedIndex=-1
						extension.text='';
						extension.errorString='';
						callblending.selected=false
						grabacion_demanda.selected=false
						recepcion_fuera_cc.selected=false
						extension_fuera_cc.text=''
				}
				*/
					
			}
			
			protected function apellido_paterno_usr_changeHandler(event:TextOperationEvent):void
			{
				// documentar
				usr.text = nombre_usr.text.substr(0,1).toLocaleLowerCase() +apellido_paterno_usr.text.toLocaleLowerCase()
			}
			
			protected function labelTipoUsuario(item:Usuario,nombre_columna:GridColumn):String
			{
				// documentar
				switch(item.id_tipo_usr){
					case 1 :
						return "Administrador"
						break;
					case 2:
						return "Revisor"
						break;
					default: // Tipo de usuario no definido
						return ""
				}
			}
			
			
		]]>
	</fx:Script>
	<mx:states>
		<s:State name="grid"/>
		<s:State name="alta_modificacion"/>
	</mx:states>
	
	<fx:Declarations>
		<s:RemoteObject id="roUsuarios" destination="UsuarioService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="findAll" result="resultHandlerFindAll(event)" fault="faultHandler(event)" />
			<s:method name="Find_UsuariosSupervisor" result="resultHandlerFindAll(event)" fault="faultHandler(event)" />
			<s:method name="create" result="resultHandlerNuevoUsuario(event)" fault="faultHandler(event)" />
			<s:method name="update" result="resultHandlerActualizaUsuario(event)" fault="faultHandler(event)" />
			<s:method name="remove" result="resultHandlerEliminaUsuario(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		<s:RemoteObject id="roTipoUsuarios" destination="TipoUsuarioService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="findAll" result="resultHandlerTipoUsuarioFindAll(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		<s:RemoteObject id="roPosicionAgente" destination="PosicionAgenteService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="findAll" result="resultHandlerPosicionAgenteFindAll(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		<s:RemoteObject id="roLogin" destination="loginService" fault="faultHandler(event)" endpoint="{endpoint}" >
			<s:method name="validaBloqueoUsuario" result="result_validaBloqueo(event)" fault="faultHandler(event)" />
			<s:method name="Desbloquea_Usuario" result="result_DesbloqueaUsuario(event)" fault="faultHandler(event)" />
		</s:RemoteObject>

		<mx:StringValidator id="SV_nombre_usr" source="{nombre_usr}" trigger="{btnGuardar}" property="text" required="true" maxLength="30" />
		<mx:StringValidator id="SV_apellido_paterno_usr" source="{apellido_paterno_usr}" trigger="{btnGuardar}" property="text"  required="true" minLength="2" maxLength="30" />
		<mx:EmailValidator  id="EV_email_usr" source="{email_usr}" trigger="{btnGuardar}" property="text" required="false" missingAtSignError="E-mail invalido, no se encuentra el caracter @ " invalidDomainError="E-mail invalido, dominio invalido" missingUsernameError="E-mail invalido, no se encuentra username" />
		<mx:StringValidator id="SV_estatus_usuario" source="{estatus_usr}" trigger="{btnGuardar}" property="selected" required="true" maxLength="5" minLength="4" />
		<mx:NumberValidator id="NV_id_tipo_usr" source="{id_tipo_usr}" trigger="{btnGuardar}" property = "selectedIndex" minValue="0" lowerThanMinError="Campo obligatorio"/>

	</fx:Declarations>
	
	<s:DataGrid id="dg" includeIn="grid" left="10" right="10" height="83%" editable="false"
				enabled="true" horizontalCenter="0" verticalCenter="16">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="id_tipo_usr" headerText="Tipo Usuario" labelFunction="labelTipoUsuario" ></s:GridColumn>
				<s:GridColumn dataField="usr" headerText="Usuario"></s:GridColumn>
				<s:GridColumn dataField="nombre_usr" headerText="Nombre"></s:GridColumn>
				<s:GridColumn dataField="apellido_paterno_usr" headerText="Apellido Paterno"></s:GridColumn>
				<s:GridColumn dataField="apellido_materno_usr" headerText="Apellido Materno"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:HGroup includeIn="grid" left="10" right="10" top="10" bottom="287" horizontalCenter="0"  verticalCenter="-139">
		<s:Button width="80" label="Nuevo" click="nuevo()"/>
		<s:Button width="80" label="Modificar" click="modificar()"/>
		<s:Button width="80" label="Eliminar" click="eliminar()"/>
		<s:Button width="80" label="Buscar" click="Buscar()"/> 
		<s:Button width="80" label="Cerrar" click="parent.removeChild(this)"/>
	</s:HGroup>
	<s:HGroup includeIn="alta_modificacion" y="10" left="10" right="10" horizontalCenter="0">
		<s:Button id="btnGuardar" x="374" y="37" label="Guardar" click="save()"/>
		<s:Button label="Cerrar" click="cerrar()"/>
	</s:HGroup>
	
	<s:Form id="formDatosPersonales" includeIn="alta_modificacion" y="38" left="1" width="454"
			height="364">
		<s:FormHeading label="Datos Generales"/>
		<s:FormItem  id="finombre_usr" width="265" label="Nombre" required="true">
			<s:layout>
				<s:FormLayout/>
			</s:layout>
			<s:TextInput id="nombre_usr" text="{usuario.nombre_usr}"/>
		</s:FormItem>
		<s:FormItem id="fiapellido_paterno_usr" width="265" label="Apellido Paterno" required="true">
			<s:TextInput id="apellido_paterno_usr" change="apellido_paterno_usr_changeHandler(event)"
						 text="{usuario.apellido_paterno_usr}"/>
		</s:FormItem>
		<s:FormItem id="fiapellido_materno_usr" width="265" label="Apellido Materno" required="false">
			<s:TextInput id="apellido_materno_usr" text="{usuario.apellido_materno_usr}"/>
		</s:FormItem>
		<s:FormItem id="fiemail_usr"  x="0" y="163" width="265" label="E-mail">
			<s:TextInput id="email_usr" text="{usuario.email_usr}"/>
		</s:FormItem>
		<s:FormItem id="fiestatus_usr" width="265" label="Activo / Inactivo" >
			<s:CheckBox id="estatus_usr"  />
		</s:FormItem>
		<s:FormItem id="fiid_tipo_usr" width="265" label="Tipo" required="true">
			<s:ComboBox id="id_tipo_usr" width="120" change="id_tipo_usr_changeHandler(event)"
						labelField="nombre_tipo" selectedItem="{usuario.id_tipo_usr}"/>
		</s:FormItem>
		<s:FormItem id="fibloqueado" width="265" label="Usuario Bloqueado" visible="false">
			<s:CheckBox id="check_bloqueo"/>
		</s:FormItem>
		<s:FormItem visible="false" width="265" label="Contraseña">
			<s:TextInput id="password" displayAsPassword="true" text="{usuario.password}"/>
		</s:FormItem>
		<s:FormItem visible="false" left="2" top="0" width="265" label="Id">
			<s:TextInput id="usr" editable="false" text="{usuario.usr}"/>
		</s:FormItem>
		<s:FormItem  id="fiid_usr" visible="false" left="2" top="0" width="265" label="Id_usr">
			<s:TextInput id="id_usr" editable="false" text="{usuario.id_usr}"/>
		</s:FormItem>
	</s:Form>

	
</mx:Canvas>
