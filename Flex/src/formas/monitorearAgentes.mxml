<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   label="{nombreCatalogo}" creationComplete="cargaDatos()"
		   width.alta_modificacion="95%" height.alta_modificacion="95%"
		   width.grid="732" height.grid="389" locale="en_ES"
		   
		   >
	<fx:Metadata>
		[Event(name="usarioCreated", type="UsuarioEvent")]
		[Event(name="usuarioUpdated", type="UsuarioEvent")]
		[Event(name="usuarioDeleted", type="UsuarioEvent")]
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.events.MessageFaultEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.messages.ErrorMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import objetosJava.*;
			import objetosJava.DesconectarAgente;
			import objetosJava.MonitoreoAgentes;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			//Variables generales del sistema
			[Bindable] public var chanel:String;
			[Bindable] public var usuariologeado:Usuario;
			[Bindable] public var endpoint:String;
			[Bindable] public var message:String;
			[Bindable] public var nombreCatalogo:String;
			[Bindable] public var msg:AsyncMessage = new AsyncMessage();
						

			//Variables de uso particular
			
			[Bindable]
			private var DP_monitor:ArrayCollection;
			
			
			private function cargaDatos():void{
				Alert.okLabel="Aceptar";

				
				roMonitoreoAgentes.findAll(usuariologeado.id_tipo_usr);
				

			}
			
			private function cuentaSegundos(event:TimerEvent):void{
				trace("timerHandler: " + event);
				var contador_int:int = 0;
				
				//contador = contador + 1;
				while (contador_int < DP_monitor.length){
					DP_monitor[contador_int].hora_estado = int(DP_monitor[contador_int].hora_estado + 1)
					contador_int ++ ;
				}
				DP_monitor.refresh();
				
					trace("System Total Memory BEFORE Garbage Collection: " + System.totalMemory );
					try
					{
						trace("Forcing Garbage Collection...");
						new LocalConnection().connect('_noop');
						new LocalConnection().connect('_noop');
					}
					catch (e:Error)
					{
						// The following error is expected: Error #2082: Connect failed because the object is already connected.
						//Application.application.callLater(showTotalMemory);
					}
				
				

				return;
			}
			
			private function alMostrar(evento:TimerEvent):void{
				var momento:Date = new Date(); //me creo un objeto llamado momento y lo asocio don Date y me da la fecha del momento del equipo y a partir de ese momento voy a continuacion sacar inf.
				
				var meses:Array = new Array("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre");
				var diasSemana:Array = new Array("Domingo","Lunes","Martes","Miercoles","Jueves","Viernes","Sabado");
				
				var anyo:uint = momento.fullYear; //año y entero
				var mes:String = meses[momento.month]; //aqi rcupero el mes q toca pero a partir del array q tengo definid mas arriba. (Recuperamos el mes del array de los meses) si ponemos [] dentro nos devuelve texto
				var numDia:uint = momento.date;
				var dia:String = diasSemana[momento.day];
				//recuperamos el dia dentro del mes correspondient
				
				
				//Si es necesario, añado ceros delante
				//ls 3 valores los almacenos en 3 variables. Si no qeremos q añada 0 delante qito en estas 3 variablesanyadoCeroDelante y la funcion siguiente no se crea: function anyadoCeroDelante(valor:uint):String{}
				var hora:String = anyadoCeroDelante(momento.hours); 
				var minuto:String = anyadoCeroDelante(momento.minutes);
				var segundo:String = anyadoCeroDelante(momento.seconds);
				
				//" / "+ dia + " " + numDia + " " + mes + " " + anyo;
				
				
			}
			
			private function anyadoCeroDelante(valor:uint):String{
				
				var retorno:String = "";
				if(valor <10){ //si es menos de 10 se mostrara
					retorno = "0" + valor;
				}else{
					retorno = String(valor); //me qedo el valor tal cual
				}
				return retorno;
			}
			
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString,"Error");
			}
			
			
			
			private function resultHandlerFindAll(event:ResultEvent):void{
				try{
					
					DP_monitor = ArrayCollection(event.result);
					dg_monitor_agentes.dataProvider = DP_monitor;
					
					//dg_monitor_agentes.grid.
					
					
					//Designa los itemRenders que iluminan la fila
					var contador:int = 0;
					var lista:IList= dg_monitor_agentes.columns;	
					dg_monitor_agentes.dataTipFunction=onBuildToolTip;
					
					while (contador < dg_monitor_agentes.columns.length ){
							
							var columna:GridColumn = GridColumn ( lista.getItemAt(contador) );
							columna.itemRendererFunction= estatus_ItemRendererFunction;
							contador ++;	
					}	
					
					
				}catch(error:Error){
					Alert.show(error.toString());
				}
			}
			
			private function estatus_ItemRendererFunction(item:Object, column:GridColumn):ClassFactory {
				//trace(item.inStock);
				var grid_a:spark.components.DataGrid= column.grid.dataGrid
				
				if (grid_a.dataProvider != null && grid_a.dataProvider.length > 0){
					switch(item.estatus ){ 
						case 1: //Desconectado
							return new ClassFactory(EstatusItemRenderer_desconectado);
						break;
						case 2: //Pausa
							return new ClassFactory(EstatusItemRenderer_pausa);
						break;
						case 3: //Disponible
							return new ClassFactory(EstatusItemRenderer_disponible);
						break;
						case 4: //Realizando llamada
							return new ClassFactory(EstatusItemRenderer_realizandoLlamada);
						break;
						case 5: //Recibiendo llamada
							return new ClassFactory(EstatusItemRenderer_recibiendoLlamada);
						break;
						case 6: //Post-llamada
							return new ClassFactory(EstatusItemRenderer_postLlamada);
						break;
						
					}

						
				}
				
				return new ClassFactory(DefaultGridItemRenderer)
			}
			
			
			protected function dg_monitor_agentes_selectionChangeHandler(event:GridSelectionEvent):void
			{
				bt_desc_agente.enabled=true;
				bt_enviar_mensaje.enabled=true;
				
			}
			
			private function bt_desc_agente_clickHandler(event:MouseEvent):void{
		
				try{
					if (dg_monitor_agentes.selectedItem == null ){
						Alert.show("Debes seleccionar un agente","Error");
						return;
					}
					
					var nombre:String = String(dg_monitor_agentes.selectedItem.nombre_usr);
					var id_usr:int = int(dg_monitor_agentes.selectedItem.id_usr);
					var desconectarAgenteObj:DesconectarAgente = new DesconectarAgente();
					
					//Alert.show("nombre: "+nombre+" - Id_usr"+id_usr);
					desconectarAgenteObj.usuariologeado = usuariologeado;	
					desconectarAgenteObj.openWindow(event,id_usr,nombre,this,roDesconectarAgente,messageProducer);
				}
				catch(e:ErrorMessage){
					Alert.show("Alert"+e);
				}
			}
			
			private function bt_desc_agente_todos_clickHandler(event:MouseEvent):void{
				try{
					var desconectarAgenteObj:DesconectarAgente = new DesconectarAgente();
					desconectarAgenteObj.usuariologeado = usuariologeado;
					desconectarAgenteObj.openWindowTodos(event, ArrayCollection (dg_monitor_agentes.dataProvider) ,this,roDesconectarAgente,messageProducer);
				
				}catch(e:ErrorMessage){
					Alert.show("Alert"+e);
				}	
			}
			
			private function bt_enviar_mensaje_clickHandler(event:MouseEvent):void{
				
				if(dg_monitor_agentes.selectedItem == null){
					Alert.show("Debes seleccionar un agente.","Error");
					return
				}
				
				var contacto:Contacto = new Contacto();
				
				contacto.nombre_usr= String(dg_monitor_agentes.selectedItem.nombre_usr);
				contacto.id_usr = int(dg_monitor_agentes.selectedItem.id_usr);
				
					
				FlexGlobals.topLevelApplication.CreaConversacion_mensajero(contacto);
				
			}
			private function actualizar():void{
				roMonitoreoAgentes.findAll(usuariologeado.id_tipo_usr);
			}
			//////////////////////////////////////////NUEVO
			
			private function Message_handleResponse(event:MessageEvent):void
			{
				//estado = int(event.message.headers["id_estado"]);
				//Cambia_Estado();
				Alert.show(""+event.message.headers["id_estado"] + "  "+ event.message.headers["usuario"]);
			}
			
			protected function messageProducer_faultHandler(event:MessageFaultEvent):void
			{
				Alert.show(event.message.faultString+'\n '+event.message.faultDetail+event.message.faultCode,"Error");
			}
			
			public function result_ConectSupervisor(event:ResultEvent):void{

			}
			
			private function result_UpdateEstado(event:ResultEvent):void{
				var ok:int = int(event.result);
				if(!ok)
					Alert.show("Error en el cambio de estado");	
			}
			
		
			
			protected function bt_eviar_mensaje_todos_clickHandler(event:MouseEvent):void
			{
				
				var desconectarAgenteObj:DesconectarAgente = new DesconectarAgente();
				desconectarAgenteObj.usuariologeado = usuariologeado;
				desconectarAgenteObj.openWindowMensajeTodos(event,ArrayCollection(dg_monitor_agentes.dataProvider) , this,messageProducer)
			
			}
			
			private function resultHandlerDesconexion(event:ResultEvent):void{
				//Alert.show(event.toString());
			}
			
			
			
			private function onBuildToolTip (item:Object,column:GridColumn):String{
				if(item != null)
				return item.campanas; //item.campanas;
				else
				return "";
				
				
			}
			
			private function lfunction_tooltip(item:Object):String{
				return "Hola";
			}
			
			
			private function Abre_Mensaje():void{
				
				var ventana_mensaje:enviarMensaje = PopUpManager.createPopUp(this, enviarMensaje, true) as enviarMensaje;
				ventana_mensaje.endpoint = endpoint;
				ventana_mensaje.usuariologeado = usuariologeado;
				ventana_mensaje.message= message;
						
			}
			
			
		]]>
	</fx:Script>
	<mx:states>
		<s:State name="grid"/>
		<s:State name="alta_modificacion"/>
	</mx:states>
	
	<fx:Declarations>
		<s:RemoteObject id="roMonitoreoAgentes" destination="MonitorearAgentesService" fault="faultHandler(event)"  endpoint="{endpoint}">	
			<s:method name="findAll" result="resultHandlerFindAll(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		
		
		<s:RemoteObject id="roDesconectarAgente" destination="DesconectarAgenteService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="desconexion" result="resultHandlerDesconexion(event)" fault="faultHandler(event)" />
			
		</s:RemoteObject>

		
		
		<s:RemoteObject id="roevento" destination="EventoService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="Update_Estado" result="result_UpdateEstado(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		
		
		<s:RemoteObject id="rosupervisor" destination="SupervisorService" fault="faultHandler(event)"  endpoint="{endpoint}">
			<s:method name="Find_ConectSupervisor" result="result_ConectSupervisor(event)" fault="faultHandler(event)" />
		</s:RemoteObject>
		
		
	
		
		<s:Producer id="messageProducer" destination="agentes" channelSet="{msjChannelEstado}" 
					fault="messageProducer_faultHandler(event)" />
		
		<s:ChannelSet  id="msjChannelEstado" > 
			<s:channels>
				<s:AMFChannel uri= "{message}"/>
			</s:channels>
		</s:ChannelSet>
		
		
		
	</fx:Declarations>
	
	
	
	<s:HGroup includeIn="grid" left="10" right="10" top="10" bottom="287" horizontalCenter="0"
			  verticalCenter="-139">
		
		<s:Button label="Cerrar" click="parent.removeChild(this)"/>
		<s:Button id="bt_actualizar" label="Actualizar" click="actualizar()"/>
	</s:HGroup>
	<s:HGroup includeIn="alta_modificacion" y="10" left="10" right="10" horizontalCenter="0">
	</s:HGroup>
	
	<s:Form id="formDatosPersonales" includeIn="alta_modificacion" y="38" left="1" right="319" height="325" >
		<s:layout>
			<s:FormLayout paddingTop="-10" paddingLeft="0" gap="0" rowHeight="35" requestedRowCount="10" />
		</s:layout>
	</s:Form>
	<s:Group includeIn="grid" x="10" y="49" width="722" height="329">
		
		
		
		<s:DataGrid id="dg_monitor_agentes" x="10" y="10" width="563" height="250" editable="false"
					enabled="true" selectionChange="dg_monitor_agentes_selectionChangeHandler(event)"
					dataTipFunction="onBuildToolTip">
			<s:columns>
				<s:ArrayList >
					<s:GridColumn dataField="id_usr" headerText="Id"  ></s:GridColumn>
					<s:GridColumn dataField="nombre_usr" headerText="Nombre" ></s:GridColumn>
					<s:GridColumn dataField="apellido_usr" headerText="Apellido" ></s:GridColumn>
					<s:GridColumn dataField="num_camp_usr" headerText="Número de Campañas" showDataTips="true"></s:GridColumn>
					<s:GridColumn dataField="extension" headerText="Extensión" ></s:GridColumn>
					<s:GridColumn dataField="estatus" headerText="Estatus" ></s:GridColumn>
					<s:GridColumn dataField="hora_estado" headerText="Tiempo"></s:GridColumn>
					<s:GridColumn dataField="detalle" headerText="Detalle"></s:GridColumn>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		
		<s:Button id="bt_desc_agente" x="583" y="15" label="Desconectar Agente"
				  click="bt_desc_agente_clickHandler(event)" enabled="false"/>
		<s:Button id="bt_desc_todos" x="581" y="59" width="131" label="Desconectar Todos"
				  enabled="true" click="bt_desc_agente_todos_clickHandler(event)" />
		<s:Button id="bt_enviar_mensaje" x="581" y="106" width="131" label="Mensaje Agente"
				  click="bt_enviar_mensaje_clickHandler(event)" enabled="false"/>
		<s:Button id="bt_eviar_mensaje_todos" x="581" y="149" width="131"
				  label="Mensaje Todos" click="bt_eviar_mensaje_todos_clickHandler(event)"/>
		
		
	</s:Group>
	
	
</mx:Canvas>